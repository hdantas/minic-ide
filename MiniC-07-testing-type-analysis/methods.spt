module methods

language MiniC
start symbol Program


// We covered name resolution tests already in a previous assignment.
// We skipped method names in that assignment, since method name resolution
// requires type analysis. Consider the following test case as an example:

// The type of the callee expression determines the class in which the method declaration can be found.
// In this example, the expression new Foo() is of type ClassType(Foo) and the corresponding class Foo
// contains a method declaration for run().

// You should come up with test cases for the resolution of method names.
// Start with simple test cases, but keep in mind that method name resolution
// is quite complex and that coverage is the main criterion for your grade.
// It is important to think about forward and backward references,
// resolution in the presence of homonyms and overriding, and the influence
// of class hierarchies on resolution.
 
// Field/Struct variables resolution was completed in Day 05: Testing Name Analysis

test method name resolution [[
  int [[foo]]() { return 0; }
  int main(){ return [[foo]](); }
  0
]] resolve #2 to #1

test method name resolution [[
  int [[foo]]() { return 0; }
  int foo(int a) { return a; }
  int main(){ return [[foo]](); }
  0
]] resolve #2 to #1

test method name resolution [[
  int foo() { return 0; }
  int [[foo]](int a) { return a; }
  int main(){ return [[foo]](1); }
  0
]] resolve #2 to #1

test method name resolution [[
  int foo() { return 0; }
  int main(){ return [[foo]](1); }
  int [[foo]](int a) { return a; }
  0
]] resolve #1 to #2

test method name resolution [[
  int main(){ return [[foo]](1); }
  int foo() { return 0; }
  int [[foo]](int a) { return a; }
  0
]] resolve #1 to #2

test method name resolution [[
  float main(){ return [[foo]](1.0, 0); }
  float foo(int a, float b) { return a; }
  float [[foo]](float a, int b) { return a; }
  0
]] resolve #1 to #2

// %% Method errors %%
// You should also come up with test cases for error checking on method names.
// This should include test cases for errors on duplicate definitions,
// missing definitions, and method overloading as well as for notes
// on method overriding. Similar to previous test cases,
// you can pair up positive (0 errors) and negative test cases.

// Assuming method overloading is acceptable
test correct program[[
  int foo(){return 0;}
  int foo(int a){return a;}
  int foo(int a, int b){return a + b;}
  foo(1, 2)
]] 0 errors

test undefined function [[
  int foo(){
    return [[bar]](); 
  }
  0
]] 1 error

test undefined function [[
    int bar(int a) {return 0;}
    int foo(){
    return [[bar]](); 
  }
  0
]] 1 error

test undefined function [[
  int foo(int a, int b){
    return 0; 
  }
  [[foo]](0)
]] 1 error

test undefined function [[
  int foo(float a, int b){ return 0;}
  int foo(int a, float b){ return 0;}
  [[foo]](0.1, 0.1)
]] 1 error

test error on duplicate function with same signature [[
  int foo(){return 0;}
  int foo(){return 0;}
  0
]] 2 errors


test error on duplicate function with same signature [[
  float foo(){return 0;}
  int foo(){return 0;}
  0
]] 2 errors

test error on duplicate function with same signature [[
  float foo(int a, int b){return 0;}
  int foo(int c, int d){return 0;}
  0
]] 2 errors