module methods

language MiniC
start symbol Program


// We covered name resolution tests already in a previous assignment.
// We skipped method names in that assignment, since method name resolution
// requires type analysis. Consider the following test case as an example:

// The type of the callee expression determines the class in which the method declaration can be found.
// In this example, the expression new Foo() is of type ClassType(Foo) and the corresponding class Foo
// contains a method declaration for run().

// You should come up with test cases for the resolution of method names.
// Start with simple test cases, but keep in mind that method name resolution
// is quite complex and that coverage is the main criterion for your grade.
// It is important to think about forward and backward references,
// resolution in the presence of homonyms and overriding, and the influence
// of class hierarchies on resolution.
 
// Field/Struct variables resolution was completed in Day 05: Testing Name Analysis

// Method name resolution
test method name resolution [[
  int [[foo]]() { return 0; }
  int main(){ return [[foo]](); }
  0
]] resolve #2 to #1

test method name resolution [[
  float [[foo]]() { return 4.2; }
  float main(){ return [[foo]](); }
  0
]] resolve #2 to #1

test method name resolution [[
	struct foo {int bar;};
	
  struct foo [[foo]]() { struct foo bar; return bar; }
  struct foo main(){ return [[foo]](); }
  
  0
]] resolve #2 to #1


test method name resolution [[
  int [[foo]]() { return 0; }
  int foo(int a) { return a; }
  int main(){ return [[foo]](); }
  0
]] resolve #2 to #1

test method name resolution [[
  float [[foo]]() { return 4.2; }
  int foo(int a) { return a; }
  float main(){ return [[foo]](); }
  0
]] resolve #2 to #1

test method name resolution [[
  struct bar {int foo;};
  
  float foo() { return 4.2;}
  int [[foo]](struct bar a) { return a.foo; }
  int main(struct bar a){ return [[foo]](a); }
  0
]] resolve #2 to #1

test method name resolution [[
  int foo() { return 0; }
  int [[foo]](int a) { return a; }
  int main(){ return [[foo]](1); }
  0
]] resolve #2 to #1


test method name resolution [[
	struct foo {float b;};
	
  float foo(int a, float b) { return b; }
  float foo(float a, int b) { return a; }
  float [[foo]](float a, int b, struct foo c) { return c.b; }
  
  float main(){ 
  	struct foo bar;
  	return [[foo]](1.0, 0, bar); }
  
  0
]] resolve #2 to #1

test method name resolution [[
  struct foo {int foo;};
  int bar(struct foo b){ return 0;}
  int [[foo]](float a, int b){ return [[foo]](4.2, 4);}
  0
]] resolve #2 to #1

test method name resolution [[
  struct foo {int foo;};
  int foo(int a){ return 0;}
  int [[foo]](struct foo bar){
  	struct foo foobar;
  	return [[foo]](foobar);
  }
  0
]] resolve #2 to #1

// %% Method errors %%
// You should also come up with test cases for error checking on method names.
// This should include test cases for errors on duplicate definitions,
// missing definitions, and method overloading as well as for notes
// on method overriding. Similar to previous test cases,
// you can pair up positive (0 errors) and negative test cases.

// Day 05 Testing Name Analysis includes tests on forward declarations
// Assuming method overloading is acceptable in MiniC

// Missing method definition
test correct program[[
  int foo(){return 0;}
  int foo(int a){return a;}
  int foo(int a, int b){return a + b;}
  foo(1, 2)
]] 0 errors

test correct program[[
  int foo(){return 0;}
  float foo(float a){return a;}
  float foo(int a, float b){return b;}
  foo(1, 4.2)
]] 0 errors

test correct program[[
  struct foo {int foo;};
  struct foo bar;
  int foo(){return 0;}
  float foo(float a){return a;}
  float foo(int a, float b){return b;}
  int foo(int a, struct foo b){return b.foo;}
  int foo(float a, struct foo b){return b.foo;}
  struct foo foo(struct foo foo){return foo;}
  
  foo(1, bar)
]] 0 errors

test correct program [[
  struct foo {int foo;};
  int bar(struct foo b){ return 0;}
  int foo(float a, int b){ return foo(4.2, 4);}
  0
]] 0 errors

test undefined function [[
  int foo(){
    return [[bar]](); 
  }
  0
]] 2 errors // 1 error for missing function definition. 1 error for wrong/unkown return type

test undefined function [[
  int bar(int a) {return 0;}
  int foo(){ return [[bar]]();}
  0
]] 2 errors

test undefined function [[
  int foo(int a, int b){
    return 0; 
  }
  [[foo]](0)
]] 1 error

test undefined function [[
  int foo(float a, int b){ return 0;}
  int foo(int a, float b){ return 0;}
  [[foo]](0.1, 0.1)
]] 1 error

test undefined function [[
	struct foo {int foo;};
  int bar(struct foo b){ return 0;}
  int foo(float a, int b){ return [[foo]](1);}
  0
]] 2 errors

test undefined function [[
  struct foo {int foo;};
  struct bar {int bar;};
  struct foo foo(struct foo f, struct bar b){ return [[foo]](f);}
  0
]] 2 errors


// Duplicate method definition
test error on duplicate function [[
  int foo(){return 0;}
  int [[foo]](){return 0;}
  0
]] 1 error

test error on duplicate function [[
  
  float foo(){return 4.2;}  
  float [[foo]](){return 8.4;}
  0
]] 1 error

test error on duplicate function [[
  struct foo {int foo;};
  struct bar {int bar;};
  struct foo f;
  struct bar b;
  struct foo foo(){return f;}  
  struct bar [[foo]](){return b;}
  0
]] 1 error

test error on duplicate function [[
  int foo(){return 0;}
  float [[foo]](){return 0.0;}
  0
]] 1 error

test error on duplicate function [[
  float foo(int a, int b){return 4.3;}
  int [[foo]](int c, int d){return 4;}
  0
]] 1 error

test error on duplicate function [[
  struct foo {int foo;};
  float foo(){return 4.3;}
  struct foo [[foo]](){
  	struct foo f;
  	return f;}
  0
]] 1 error

