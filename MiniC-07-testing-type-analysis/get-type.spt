module get-type

language MiniC
start symbol Program

// In test cases for type analysis, you write syntactically correct programs
// and mark expressions with inner square bracket blocks. You can then specify
// the expected type of the marked expression in a run-to clause.
// For example, the following two test cases require an integer literal
// to be of type Int() and a variable reference to be of its declared type Bool():


// You should come up with test cases for the types of all kinds of expressions.
// Just like previous testing assignments, this assignment is all about the coverage of your test suite.

// CONST EXPRESSIONS

test const exp[[
  [[0]]
]] run get-type to Int()

test const exp[[
  [[4.2]]
]] run get-type to Float()

test const exp[[
  struct foo{};
  struct foo bar;
  [[bar]]
]] run get-type to Struct("foo"{_}) //TODO check


// && EXPRESSIONS

test and exp[[
 [[1 && 2]]
]] run get-type to Int()


// < EXPRESSIONS

test less than exp[[
  [[1 < 2]]
]] run get-type to Int()

test less than exp[[
  [[3.4 < 5.6]]
]] run get-type to Int()

test less than exp[[
  [[1 < 1.2]]
]] run get-type to Int()


// ADD/SUBTRACT/MULTIPLY EXPRESSIONS

test binary exp [[
  [[4 + 1]]
]] run get-type to Int()

test binary exp[[
  [[4.1 + 1]]
]] run get-type to Float()

test binary exp [[
  [[4.1 + 1.2]]
]] run get-type to Float()

test binary exp [[
  [[4 - 1]]
]] run get-type to Int()

test binary exp [[
  [[4.1 - 1]]
]] run get-type to Float()

test binary exp [[
  [[4.1 - 1.2]]
]] run get-type to Float()

test binary exp [[
  [[4 * 1]]
]] run get-type to Int()

test binary exp [[
  [[4.1 * 1]]
]] run get-type to Float()

test binary exp [[
  [[4.1 * 1.2]]
]] run get-type to Float()

test binary exp [[
  int a;
  float b;
  [[a - b * 3]];
]]  run get-type to Float()


// ! EXPRESSIONS

test not exp [[
  [[!0]]
]]  run get-type to Int()

test not exp [[
  [[!1.2]]
]]  run get-type to Int()

test not exp [[
  int main(float a){
    return [[!a]];
  } 
  0
]]  run get-type to Int()

// SIZEOF EXPRESSIONS

test sizeof exp [[
  int main() { return [[sizeof(4)]]; }
  0
]] run get-type to Int()

test sizeof exp [[
  int main() { return [[sizeof(4.2)]]; }
  0
]] run get-type to Int()

test sizeof exp [[
  int f;
  [[sizeof(f)]]
]] run get-type to Int()

test sizeof exp [[
  float f;
  [[sizeof(f)]]
]] run get-type to Int()


test sizeof exp [[
  struct foo {int bar;};
  struct foo f;
  [[sizeof(f)]]
]] run get-type to Int()


// UMINUS/UPLUS EXPRESSIONS

test unary exp [[
  [[+0]]
]] run get-type to Int()

test unary exp [[
  [[-0]]
]] run get-type to Int()


test unary exp [[
  [[+4.2]]
]] run get-type to Float()

test unary exp [[
  [[-4.2]]
]] run get-type to Float()


test unary exp [[
  int main(int a){
    int b;
    return [[+a]];
  } 
  0
]] run get-type to Int()

test unary exp [[
  int main(int a){
    int b;
    return [[-a]];
  } 
  0
]] run get-type to Int()


test unary exp [[
  int main(float a){
    return [[+a]];
  } 
  0
]] run get-type to Float()

test unary exp [[
  int main(float a){
    return [[-a]];
  } 
  0
]] run get-type to Float()


// () EXPRESSIONS

test parentheses [[
  [[(1)]]
]] run get-type to Int()

test parentheses [[
  [[(4.2)]]
]] run get-type to Float()

test parentheses [[
  int i;
  [[(i)]]
]] run get-type to Float()

test parentheses [[
  float f;
  [[(f)]]
]] run get-type to Float()


test parentheses [[
  struct foo {int bar;};
  struct foo f;
  [[(f)]]
]] run get-type to Struct("foo"{_})


// STRUCT MEMBER EXPRESSIONS

test field access [[
  struct foo {int a;};
  struct foo f;

  [[f.a]]
]] run get-type to Int()


test field access [[
  struct foo {float a;};
  struct foo f;
  [[f.a]]
]] run get-type to Float()

test field access [[
  struct foo {int a[5];};
  struct foo f;

  [[f.a]]
]] run get-type to Int()

test field access [[
  struct foo {float a[5];};
  struct foo f;

  [[f.a]]
]] run get-type to Float()

test field access [[
  struct foo {int a[5];};
  struct foo f;

  [[f.a[1] ]]
]] run get-type to Int()

test field access [[
  struct foo {float a[5];};
  struct foo f;

  [[f.a[1] ]]
]] run get-type to Float()


// CALL METHOD EXPRESSIONS

test method call [[
  int main(int a){ return 0;} 
  [[main(0)]]
]]  run get-type to Int()

test method call [[
  float foo(float a) { return a; }
  [[foo(1.2)]]
]] run get-type to Float()

test method call [[
  struct foo {int bar;};
  struct foo bar() {
    struct foo f;
    return f;
  }
  [[bar()]]
]] run get-type to Struct("foo"{_}) //TODO check


// VAR/ARRAYVAR EXPRESSIONS

test var access [[
  int a;
  [[a]]
]] run get-type to Int()

test var access [[
  float a;
  [[a]]
]] run get-type to Float()

test var access [[
  struct foo {int bar;};
  struct foo f;
  [[f]]
]] run get-type to Struct("foo"{_})


test var access [[
  int a[5];
  [[a]]
]] run get-type to Int()

test var access [[
  int a[5];
  [[a[1] ]]
]] run get-type to Int()

test var access [[
  float a[5];
  [[a]]
]] run get-type to Float()

test var access [[
  float a[5];
  [[a[1] ]]
]] run get-type to Float()

