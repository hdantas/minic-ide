module get-type

language MiniC
start symbol Program

// In test cases for type analysis, you write syntactically correct programs
// and mark expressions with inner square bracket blocks. You can then specify
// the expected type of the marked expression in a run-to clause.
// For example, the following two test cases require an integer literal
// to be of type Int() and a variable reference to be of its declared type Bool():


// You should come up with test cases for the types of all kinds of expressions.
// Just like previous testing assignments, this assignment is all about the coverage of your test suite.

// %% INT %%

test integer literal type [[
  int main() {
    int a;
    a = [[0]];
    return 0;
  }
  0
]] run get-type to Int()

test integer literal type [[
  int main() {
    return 0;
  }
  [[0]]
]] run get-type to Int()

test integer literal type [[
  int main() {
    return [[0]];
  }
  0
]] run get-type to Int()

test integer literal type [[
  int a[ [[3]] ];
  int main() { return 0; }
  0
]] run get-type to Int()

test integer literal type [[
  int main() {
    int a[1];
    a[0] = 2;
    return a[ [[0]] ];
  }
  0
]] run get-type to Int()

test integer literal type [[
  int main() {
    int a[1];
    a[ [[0]] ] = 2;
    return 0;
  }
  0
]] run get-type to Int()

test integer literal type [[
  int main() {
    int a[ [[1]] ];
    return 0;
  }
  0
]] run get-type to Int()

test integer literal type [[
  int main() {
    printf("%i", [[0]]);
    return 0;
  }
  0
]] run get-type to Int()

test integer literal type [[
  int main() {
    int a;
    if ([[1 < 2]])
      a = 0;
    else
      a = 1;
      
     return a;
  }
  0
]] run get-type to Int()

test integer literal type [[
  int main() {
    int a;
    if (1 < [[2]])
      a = 0;
    else
      a = 1;
      
     return a;
  }
  0
]] run get-type to Int()


test integer literal type [[
  int main() {
    int a;
    a = 0;
    while (a < [[4]])
      a = a + 1;
    return a;
  }
  0
]] run get-type to Int()

test integer literal type [[
  int main() {
    int a;
    a = 0;
    while ([[5 < 4]])
      a = 1;;
    return a;
  }
  0
]] run get-type to Int()

test integer literal type [[
  int main() { return sizeof([[4]]); }
  0
]] run get-type to Int()

test integer literal type [[
  int main() { return [[4 + 1]]; }
  0
]] run get-type to Int()

test integer literal type [[
  int main() { return [[(4)]]; }
  0
]] run get-type to Int()

test integer literal type [[
  int foo(int a) { return a; }
  int main() { return foo([[4]]); }
  0
]] run get-type to Int()

test integer literal type [[
  int foo(int a) { return a; }
  int main() { return [[foo(4)]]; }
  0
]] run get-type to Int()

test integer literal type [[
  struct foo {int a;};
  int main() {
    struct foo f;
    f.a = [[4]];
    return f.a;
  }
  0
]] run get-type to Int()

// %% FLOAT %%
test float literal type [[
  int main() {
    float a;
    a = [[4.2]];
    return 0;
  }
  0
]] run get-type to Float()

test float literal type [[
  int main() {
    return 0;
  }
  [[4.2]]
]] run get-type to Float()

test float literal type [[
  float main() {
    return [[4.2]];
  }
  0
]] run get-type to Float()

test float literal type [[
  int main() {
    printf("%f", [[4.2]]);
    return 0;
  }
  0
]] run get-type to Float()

test float literal type [[
  int main() {
  	int a;
    if (1 < [[4.2]])
      a = 0;
    else
      a = 1;
      
     return a;
  }
  0
]] run get-type to Float()


test float literal type [[
  int main() {
    int a;
    a = 0;
    while (a < [[4.2]])
      a = a + 1;
    return a;
  }
  0
]] run get-type to Float()

test float literal type [[
  int main() { return sizeof([[4.2]]); }
  0
]] run get-type to Float()

test float literal type [[
  float main() { return [[4 + 0.2]]; }
  0
]] run get-type to Float()

test float literal type [[
  float main() { return [[(4.2)]]; }
  0
]] run get-type to Float()

test float literal type [[
  float foo(float a) { return a; }
  float main() { return foo([[4.2]]); }
  0
]] run get-type to Float()

test float literal type [[
  float foo(float a) { return a; }
  float main() { return [[foo(4.2)]]; }
  0
]] run get-type to Float()

test float literal type [[
  struct foo {float a;};
  float main() {
    struct foo f;
    f.a = [[4.2]];
    return f.a;
  }
  0
]] run get-type to Float()

// %% Variable References to float %%
test variable reference float type [[
  float main() {
    float a;
    a = 4.2;
    return [[a]];
  }
  0
]] run get-type to Float()

test variable reference float type [[
  float a;
  int main() {
    a = 4.2;
    return 0;
  }
  [[a]]
]] run get-type to Float()

test variable reference float type [[
  float a;
  float main() {
    a = 4.2;
    return [[a]];
  }
  0
]] run get-type to Float()

test variable reference float type [[
  int main() {
    float a;
    a = 4.2;
    printf("%f", [[a]]);
    return 0;
  }
  0
]] run get-type to Float()

test variable reference float type [[
  float main() {
    float a;
    a = 4.2;
    if (1 < [[a]])
      a = 0;
    else
      a = 1;
      
     return a;
  }
  0
]] run get-type to Float()


test variable reference float type [[
  int main() {
    int a;
    a = 0;
    float b;
    b = 4.2;
    while (a < [[b]])
      a = a + 1;
    return a;
  }
  0
]] run get-type to Float()

test variable reference float type [[
  int main() {
    float a; a = 4.2;
    return sizeof([[a]]);
  }
  0
]] run get-type to Float()

test variable reference float type [[
  float main() {
    float a; float b;
    a = 4.0; b = 0.2;
    return [[a + b]];
  }
  0
]] run get-type to Float()

test variable reference float type [[
  float main() {
    float a; a = 4.2;
    return [[(a)]];
  }
  0
]] run get-type to Float()

test variable reference float type [[
  float foo(float a, float b) { return a + b; }
  float main() {
    float a; a = 4.2;
    return foo([[a]], 4.2);
  }
  0
]] run get-type to Float()

test variable reference float type [[
  float foo(float a) { return a; }
  float main() {
    float a; a = 4.2;
    return [[foo(a)]];
  }
  0
]] run get-type to Float()

test variable reference float type [[
  struct foo {float a;};
  float main() {
    struct foo f;
    float b; b = 4.2;
    f.a = [[b]];
    return f.a;
  }
  0
]] run get-type to Float()

// %% Variable References to integer %%
test variable reference integer type [[
  int main() {
    int a;
    a = 4;
    return [[a]];
  }
  0
]] run get-type to Int()

test variable reference integer type [[
  int a;
  int main() {
    a = 4;
    return 0;
  }
  [[a]]
]] run get-type to Int()

test variable reference integer type [[
  int a;
  int main() {
    a = 4;
    return [[a]];
  }
  0
]] run get-type to Int()

test variable reference integer type [[
  int main() {
    int a;
    a = 4;
    printf("%i", [[a]]);
    return 0;
  }
  0
]] run get-type to Int()

test variable reference integer type [[
  int main() {
    int a;
    a = 4;
    if (1 < [[a]])
      a = 0;
    else
      a = 1;
      
     return a;
  }
  0
]] run get-type to Int()

test int literal type [[
  int main() {
    int a;
    a = 1;
    if ([[1 < a]])
      a = 0;
    else
      a = 1;
      
     return a;
  }
  0
]] run get-type to Int()

test variable reference integer type [[
  int main() {
    int a;
    a = 0;
    int b;
    b = 4;
    while (a < [[b]])
      a = a + 1;
    return a;
  }
  0
]] run get-type to Int()

test variable reference integer type [[
  int main() {
    int a;
    a = 0;
    int b;
    b = 4;
    while ([[a < b]])
      a = a + 1;
    return a;
  }
  0
]] run get-type to Int()

test variable reference float type [[
  int main() {
    int a;
    a = 0;
    float b;
    b = 4.2;
    while ([[a < b]])
      a = a + 1;
    return a;
  }
  0
]] run get-type to Int()


test variable reference integer type [[
  int main() {
    int a; a = 4;
    return sizeof([[a]]);
  }
  0
]] run get-type to Int()

test variable reference integer type [[
  int main() {
    int a; int b;
    a = 4; b = 0;
    return [[a + b]];
  }
  0
]] run get-type to Int()

test variable reference integer type [[
  int main() {
    int a; a = 4;
    return [[(a)]];
  }
  0
]] run get-type to Int()

test variable reference integer type [[
  float foo(int a, float b) { return a + b; }
  float main() {
    int a; a = 4;
    return foo([[a]], 4.2);
  }
  0
]] run get-type to Int()

test variable reference integer type [[
  int foo(int a) { return a; }
  int main() {
    int a; a = 4;
    return [[foo(a)]];
  }
  0
]] run get-type to Int()

test variable reference integer type [[
  struct foo {int a;};
  int main() {
    struct foo f;
    int b; b = 4;
    f.a = [[b]];
    return f.a;
  }
  0
]] run get-type to Int()