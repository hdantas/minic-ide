module type-errors

language MiniC
start symbol Program

// %% Type errors %% 
// A type error occurs, when the type of an expression does not conform to its expected type.
// Consider the following test case as an example:

// In MiniJava, System.out.println() can only print integers.
// Thus, there should be an error on true, when we pass it to the print statement.
// Similarly, type errors can occur in other statements, expressions,
// and method declarations. You should come up with test cases for such errors.
// Again, keep in mind that coverage is the main criterion for your grade.

// %% Typing errors: assigning int to float or vice versa %%
test type errors [[
  float foo(float a) {return a;}
  int main() {
    float a; a = foo([[4]]);
    return 0;
  }
  0
]] 1 error // using int argument instead of float

test type errors [[
  int foo(int a) {return a;}
  int main() {
    float a; a = foo([[4.2]]);
    return 0;
  }
  0
]] 2 errors // using float argument instead of int

test type errors [[
  int main() {
    int a; a = [[4.2]];
    return 0;
  }
  0
]] 1 error // assigning float to int

test type errors [[
  int main() {
    float a; a = [[4]];
    return 0;
  }
  0
]] 1 error // assigning int to float

test type errors [[
  int main() { return [[4.2]]; }
  0
]] 1 error // returning float instead of int

test type errors [[
  float main() { return [[4]]; }
  0
]] 1 error // returning int instead of float

test type errors [[
  int main() { printf("%i", [[4.2]]); return 0; }
  0
]] 1 error

test type errors [[
  int main() { printf("%f", [[4]]); return 0; }
  0
]] 1 error

test type errors [[
  struct foo {int a;};
  float main() {
    struct foo f;
    f.a = [[4.2]];
    return f.a;
  }
  0
]] 1 error

test type errors [[
  struct foo {float a;};
  int main() {
    struct foo f;
    f.a = [[4]];
    return f.a;
  }
  0
]] 1 error

// %% Typing errors: using incompatible types %%

// ints are allowed for ifs or whiles

test type errors [[
  int main() {
    int a; a = 0;
    while (1)
      a = a + 1;
    return a;
  }
  0
]] 0 errors

test type errors [[
  int main() {
    int a;
    if (1) a = 0;
    else a = 1;
    return 0;
  }
  0
]] 0 errors


test type errors [[
  int main() {
    int a;
    if (2 + 2) a = 0;
    else a = 1;
    return 0;
  }
  0
]] 0 errors

test type errors [[
  int main() {
    int a; a = 0;
    while (4)
      a = a + 1;
    return a;
  }
  0
]] 0 errors

//floats are not allowed

test type errors [[
  int main() {
    int a;
    if ([[1.0]]) a = 0;
    else a = 1;
    return 0;
  }
  0
]] 1 error

test type errors [[
  int main() {
    int a;
    if ([[2 * 0.5]]) a = 0;
    else a = 1;
    return 0;
  }
  0
]] 1 error


test type errors [[
  int main() {
    int a; a = 0;
    while ([[4.2]])
      a = a + 1;
    return a;
  }
  0
]] 1 error

test type errors [[
  int main() { return ![[1.0]];}
  0
]] 1 error

test type errors [[
  int main() { return [[4.2 && 1]]; }
  0
]] 1 error

test type errors [[
  int main() { return [[4.2]]; }
  0
]] 1 error

test type errors [[
  float main() { return [[4]]; }
  0
]] 1 error

test type errors [[
  float foo() { return 4.2; }
  int main() { return [[foo]](); }
  0
]] 1 error //wrong return type

test type errors [[
  struct foo {int a;};
  struct foo main() { return [[0]]; }
  0
]] 1 error //wrong return type


test type errors [[
  int main() {
    int a[1];
    return a[ [[1.23 < 4.56]] ];
  }
  0
]] 1 error

// test type errors [[
//   int main() {
//     int a;
//     int x[5];
//     a = x[ [[1 < 2]] ];
//     return 0;
//   }
//   0
// ]] 1 error

// test type errors [[
//   int foo(int a){ return a;}
//   int main() { return foo([[1 < 2]]); }
//   0
// ]] 1 error

test type errors [[
  float foo(float a){ return a;}
  int main() { return foo([[1.0 < 2.0]]); }
  0
]] 1 error
