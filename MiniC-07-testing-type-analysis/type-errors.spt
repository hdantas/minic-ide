module type-errors

language MiniC
start symbol Program

// %% Type errors %% 
// A type error occurs, when the type of an expression does not conform to its expected type.
// Consider the following test case as an example:

// In MiniJava, System.out.println() can only print integers.
// Thus, there should be an error on true, when we pass it to the print statement.
// Similarly, type errors can occur in other statements, expressions,
// and method declarations. You should come up with test cases for such errors.
// Again, keep in mind that coverage is the main criterion for your grade.

// %% Typing errors: assigning int to float or vice versa %%

// INCORRECT ASSIGNMENT TYPE
test invalid assignment [[
  int main() {
    int a; a = [[4.2]];
    return 0;
  }
  0
]] 1 error

test invalid assignment [[
  int main() {
    float a; a = [[4]];
    return 0;
  }
  0
]] 1 error

test invalid assignment [[
  struct foo {int bar;};
  int number;
  
  int main() {
    struct foo bar;
    bar = [[number]];
    return bar.bar;
  }
  0
]] 1 error

test invalid assignment [[
  struct foo {int a;};
  float main() {
    struct foo f;
    f.a = [[4.2]];
    return 1.0;
  }
  0
]] 1 error

test invalid assignment [[
  struct foo {float a;};
  int main() {
    struct foo f;
    f.a = [[4]];
    return 4;
  }
  0
]] 1 error


// INCORRECT RETURN TYPE
test incorrect return type [[
  int main() { return [[4.2]]; }
  0
]] 1 error

test incorrect return type [[
  float main() { return [[4]]; }
  0
]] 1 error

test incorrect return type [[
  struct foo {int bar;};
  
  float main() { 
    struct foo f;
    return [[f]]; }
  0
]] 1 error

test incorrect return type [[
  struct foo {int a;};
  float main() {
    struct foo f;
    f.a = 4;
    return [[f.a]];
  }
  0
]] 1 error

test incorrect return type [[
  struct foo {float a;};
  int main() {
    struct foo f;
    f.a = 4.2;
    return [[f.a]];
  }
  0
]] 1 error


test incorrect return type [[
  float foo() { return 4.2; }
  int main() { return [[foo()]]; }
  0
]] 1 error

test incorrect return type [[
  struct foo {int a;};
  struct foo main() { return [[0]]; }
  0
]] 1 error


// INCORRECT ARGUMENT TYPE FOR PRINTFs, IFs & WHILEs
test incorrect printf argument type [[
  int main() { printf("%i", [[4.2]]); return 0; }
  0
]] 1 error

test incorrect printf argument type [[
  int main() { printf("%f", [[4]]); return 0; }
  0
]] 1 error


test while statment [[
  int main() {
    int a; a = 0;
    while (1)
      a = a + 1;
    return a;
  }
  0
]] 0 errors

test invalid while condition [[
  int main() {
    int a; a = 0;
    while ([[4.2]])
      a = a + 1;
    return a;
  }
  0
]] 1 errors

test invalid while condition [[
  struct foo {int bar;};
  int main() {
    struct foo bar;
    int a;
    while ([[bar]])
      a = a + 1;
    return a;
  }
  0
]] 1 error

test if [[
  int main() {
    int a;
    if (1) a = 0;
    else a = 1;
    return 0;
  }
  0
]] 0 errors


test if [[
  int main() {
    int a;
    if (2 + 2) a = 0;
    else a = 1;
    return 0;
  }
  0
]] 0 errors

test invalid if condition [[
  int main() {
    int a;
    if ([[1.0]]) a = 0;
    else a = 1;
    return 0;
  }
  0
]] 1 error

test invalid if condition [[
  int main() {
    int a;
    if ([[2 * 0.5]]) a = 0;
    else a = 1;
    return 0;
  }
  0
]] 2 errors


// INCOMPATIBLE TYPES TO UNARY & BINARY OPERATORS
test unary operator [[
  !4
]] 0 errors

test unary operator [[
  ![[4.2]]
]] 0 errors

test unary operator [[
  struct foo {int bar;};
  struct foo f;
  ![[f]]
]] 1 error

test unary operator [[
  struct foo {int bar;};
  struct foo f;
  -[[f]]
]] 1 error

test unary operator [[
  struct foo {int bar;};
  struct foo f;
  sizeof([[f]])
]] 1 error

test binary operator [[
  1 < [[2.1]]
]] 1 error

test binary operator [[
  struct foo {int bar;};
  struct foo f;
  [[f + 1]]
]] 2 errors

