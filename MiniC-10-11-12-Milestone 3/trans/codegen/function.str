module trans/codegen/function

imports
  libstratego-gpp
  lib/runtime/tmpl/pp
  include/MiniC
  include/MiniC-parenthesize
  runtime/nabl/-
  runtime/task/-
  runtime/types/-
  analysis/desugar
  analysis/names
  lib/jasmin/JasminXT
  
  trans/codegen/stack
  trans/codegen/type
  trans/codegen/exp
  trans/codegen/array
  trans/codegen/stmt
  trans/codegen/indices
  
rules

  // recursive call for multiple functions
  function-to-jbc: [FunctionDef(ty, i, p, s, e) | ts] -> instr*
  with
    head-fun* := <function-to-jbc> FunctionDef(ty, i, p, s, e)
  ; tail-fun* := <function-to-jbc> ts
  ; instr*    := [head-fun*, tail-fun*]
  
  function-to-jbc: [] -> []
  
  // function without parameters or local variables
  function-to-jbc: FunctionDef(t, i, p, s, e) -> instr*
  with
    types         := [PUBLIC()]
  ; stack-limit*  := <stack-limit> (p, s, e)
  ; descr*        := <get-method-descriptor> i
  ; stmts-ln      := <stmt-to-jbc-ln> s
  ; stmts*        := <linenumber-cleanup; Third> ([], stmts-ln, []) //no more duplicate lines
  ; return-jbc*   := <return-aux> (e, <get-type> e)
  ; method-stmts* := [stack-limit*, stmts*, return-jbc*]
  ; instr*        := Function-Constructor(types, i, descr*, method-stmts*)


overlays

  Function-Constructor(types, name, descr, stmts) =
  [
    JBCMethod(
      types
    , name
    , descr
    , stmts
    )
  ]

rules
	return-aux: (exp, Int()) -> instr*
	with
		jbc-exp* := <exp-to-jbc-ln> exp
  ; instr*   := [jbc-exp*, IRETURN()]

  return-aux: (exp, Float()) -> instr*
  with
    jbc-exp* := <exp-to-jbc-ln> exp
  ; instr*   := [jbc-exp*, FRETURN()]
  
  return-aux: (exp, type) -> instr* //struct instance
  with
    jbc-exp* := <exp-to-jbc-ln> exp
  ; instr*   := [jbc-exp*, ARETURN()]  
    
rules
  nabl-prop-site(|lang, ctx, uris, states, implicits): FunctionDef(ty, mname, param*, stmt*, exp) -> <fail>
  where
    param-type    := <map(param-aux)> param* //type descriptor
  ; descr         := JBCMethodDesc(param-type, <type-to-jbc> ty) 
  ; <store-method-descriptor(|ctx, descr)> mname
  ; aux-list*     := [param*, stmt*, exp]
   
  ; annotated-names   := <store-annotated-names> aux-list* //step 1 (only var declarations, no arg)
  ; varref            := <store-varuse-and-vardecs> aux-list* //step 1.5 (flatten the AST and filter out non var declarations or var calls)
  ; used-names        := <reverse; store-used-names(|[]); reverse> varref //step 2
  ; local-used-names  := <remove-global-vars> (annotated-names, used-names) //step 3
  ; available-indices := <make-list-indices(|[])> (<length> param*, <addi> (<length> param*, <length> annotated-names)) //make list [1 through # of VarDecs]

  // hashtable will hold the term/index pairs (term name is the key)
  ; names-with-index   := <determine-index(|(available-indices, [], <new-hashtable>))> local-used-names // step 4
  ; <add-args-to-hashtable(|names-with-index, 1)> param* // step 4.5
  // ; <hashtable-getlist; debug> names-with-index
  ; <match-and-store-indices(|ctx, names-with-index)> aux-list*  // step 5
    
rules
  
   param-aux: Arg(ty, name) -> <get-type; type-to-jbc> Arg(ty, name)
   param-aux: ArrayArg(ty, name) -> Array(<get-type; type-to-jbc> Arg(ty, name))
   
   
  // JBCLines cleanup
  
  linenumber-cleanup: (index, [t | ts], jbc*) -> instr
  with
    head-result := <linenumber-cleanup-aux> (index, t)
  ; newindex    := <Fst> head-result
  ; head-jbc*   := <Snd> head-result
  ; new-jbc*    := [jbc*, head-jbc*]
  ; instr       := <linenumber-cleanup> (newindex, ts, new-jbc*)
    
  linenumber-cleanup: (index, [], jbc) -> (index, [], jbc)
  linenumber-cleanup-aux: (index, []) -> (index, [])
  	
  linenumber-cleanup-aux: (index, JBCLine(i)) -> (newindex, instr)
  with
    result   := <if(<elem> (i, index), <add-to-list> (index, []), <add-to-list> (index, [JBCLine(i)]))>
  ; newindex := <Fst> result
  ; instr    := <Snd> result
  
  linenumber-cleanup-aux: (index, instr) -> (index, [instr])
  	
  add-to-list: (index, [JBCLine(i)]) -> (newindex, [JBCLine(i)])
  with
    newindex := <concat> [index, [i]]

  add-to-list: (index, []) -> (index, [])


        