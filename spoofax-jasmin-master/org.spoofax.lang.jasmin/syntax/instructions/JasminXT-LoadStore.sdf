module instructions/JasminXT-LoadStore

imports
	
	lexical/JasminXT-Names
	lexical/JasminXT-Numbers
	lexical/JasminXT-Strings
	
exports
	
	context-free syntax
		
		"bipush" Int  -> Instruction {"BIPUSH"} %% pushes a byte onto the stack as an integer value
		"sipush" Int  -> Instruction {"SIPUSH"} %% pushes a signed integer onto the stack
		
		"iconst_m1"	  -> Instruction {"ICONST_M1"} %% loads the int value -1 onto the stack
		"iconst_0" 	  -> Instruction {"ICONST_0"} %% loads the int value 0 onto the stack
		"iconst_1" 	  -> Instruction {"ICONST_1"} %% loads the int value 1 onto the stack
		"iconst_2" 	  -> Instruction {"ICONST_2"} %% loads the int value 2 onto the stack
		"iconst_3" 	  -> Instruction {"ICONST_3"} %% loads the int value 3 onto the stack
		"iconst_4" 	  -> Instruction {"ICONST_4"} %% loads the int value 4 onto the stack
		"iconst_5" 	  -> Instruction {"ICONST_5"} %% loads the int value 5 onto the stack
		
		"lconst_0" 	  -> Instruction {"LCONST_0"} %% pushes the long 0 onto the stack
		"lconst_1" 	  -> Instruction {"LCONST_1"} %% pushes the long 1 onto the stack

		"fconst_0" 	  -> Instruction {"FCONST_0"} %% pushes 0.0f on the stack
		"fconst_1" 	  -> Instruction {"FCONST_1"} %% pushes 1.0f on the stack
		"fconst_2" 	  -> Instruction {"FCONST_2"} %% pushes 2.0f on the stack
		
		"dconst_0"	  -> Instruction {"DCONST_0"} %% pushes the constant 0.0 onto the stack
		"dconst_1"	  -> Instruction {"DCONST_1"} %% pushes the constant 1.0 onto the stack
		
		"aconst_null" -> Instruction {"ACONST_NULL"} %% pushes a null reference onto the stack
		
		"ldc"    Constant -> Instruction {"LDC"} 	%% pushes a constant from a constant pool (String, int or float) onto the stack
    "ldc2_w" Constant -> Instruction {"LDC2_W"} %% pushes a constant from a constant pool (double or long) onto the stack
				
	context-free syntax
		
		"iload" VarRef -> Instruction {"ILOAD"} %% loads an int value from a local variable
		"lload" VarRef -> Instruction {"LLOAD"} %% loads a long value from a local variable
		"fload" VarRef -> Instruction {"FLOAD"} %% loads a float value from a local variable
		"dload" VarRef -> Instruction {"DLOAD"} %% loads a double value from a local variable
		"aload" VarRef -> Instruction {"ALOAD"} %% loads a reference from a local variable
		
		"iload_0" -> Instruction {"ILOAD_0"} 
		"iload_1" -> Instruction {"ILOAD_1"} 
		"iload_2" -> Instruction {"ILOAD_2"} 
		"iload_3" -> Instruction {"ILOAD_3"} 

		"aload_0" -> Instruction {"ALOAD_0"} 
		"aload_1" -> Instruction {"ALOAD_1"} 
		"aload_2" -> Instruction {"ALOAD_2"} 
		"aload_3" -> Instruction {"ALOAD_3"} 
		
		"lload_0" -> Instruction {"LLOAD_0"} 
		"lload_1" -> Instruction {"LLOAD_1"} 
		"lload_2" -> Instruction {"LLOAD_2"} 
		"lload_3" -> Instruction {"LLOAD_3"} 

		"dload_0" -> Instruction {"DLOAD_0"} 
		"dload_1" -> Instruction {"DLOAD_1"} 
		"dload_2" -> Instruction {"DLOAD_2"} 
		"dload_3" -> Instruction {"DLOAD_3"} 
		
		"fload_0" -> Instruction {"FLOAD_0"} 
		"fload_1" -> Instruction {"FLOAD_1"} 
		"fload_2" -> Instruction {"FLOAD_2"} 
		"fload_3" -> Instruction {"FLOAD_3"} 

		"istore" VarRef -> Instruction {"ISTORE"} %% stores an int value into a local variable
		"lstore" VarRef -> Instruction {"LSTORE"} %% stores a long value into a local variable
		"fstore" VarRef -> Instruction {"FSTORE"} %% stores a float value into a local variable
		"dstore" VarRef -> Instruction {"DSTORE"} %% stores a double value into a local variable
		"astore" VarRef -> Instruction {"ASTORE"} %% stores a reference into a local variable

		"istore_0" -> Instruction {"ISTORE_0"} 
		"istore_1" -> Instruction {"ISTORE_1"} 
		"istore_2" -> Instruction {"ISTORE_2"} 
		"istore_3" -> Instruction {"ISTORE_3"} 

		"astore_0" -> Instruction {"ASTORE_0"} 
		"astore_1" -> Instruction {"ASTORE_1"} 
		"astore_2" -> Instruction {"ASTORE_2"} 
		"astore_3" -> Instruction {"ASTORE_3"} 
		
		"lstore_0" -> Instruction {"LSTORE_0"} 
		"lstore_1" -> Instruction {"LSTORE_1"} 
		"lstore_2" -> Instruction {"LSTORE_2"} 
		"lstore_3" -> Instruction {"LSTORE_3"} 

		"fstore_0" -> Instruction {"FSTORE_0"} 
		"fstore_1" -> Instruction {"FSTORE_1"} 
		"fstore_2" -> Instruction {"FSTORE_2"} 
		"fstore_3" -> Instruction {"FSTORE_3"} 
		
		"dstore_0" -> Instruction {"DSTORE_0"} 
		"dstore_1" -> Instruction {"DSTORE_1"} 
		"dstore_2" -> Instruction {"DSTORE_2"} 
		"dstore_3" -> Instruction {"DSTORE_3"} 

	lexical restrictions
		
		"iload"
		"lload"
		"fload"
		"dload"
		"aload"
		"istore"
		"lstore"
		"fstore"
		"dstore"
		"astore" -/- ~[\ \t]
