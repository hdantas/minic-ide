module MiniC-Disambiguation-testcases

language MiniC
start symbol Exp


// priorities 
test left associative addition [[1 + 2 + 3]] parse to [[(1 + 2) + 3]]
test left associative subtraction [[1 - 2 - 3]] parse to [[(1 - 2) - 3]]
test left associative multiplication [[1 * 2 * 3]] parse to [[(1 * 2) * 3]]
test left associative division [[8 / 4 / 2]] parse to [[(8 / 4) / 2]]

test addition and multiplication priorities [[1 + 2 * 3]] parse to [[1 + (2 * 3)]]
test addition and division priorities [[1 + 2 / 3]] parse to [[1 + (2 / 3)]]
test subtraction and addition priorities [[1 - 2 + 3]] parse to [[(1 - 2) + 3]]
test addition and subtraction priorities [[1 + 2 - 3]] parse to [[(1 + 2) - 3]]
test division and multiplication priorities [[1 / 2 * 3]] parse to [[(1 / 2) * 3]]
test multiplication and division priorities [[1 * 2 / 3]] parse to [[(1 * 2) / 3]]

test array [[1 + x[0]]] parse to [[1 + (x[0])]]
test struct access [[2 * x.y]] parse to [[2 * (x.y)]]
test functioncall [[1 + foo()]] parse to [[1 + (foo())]]
test uminus [[-1 + 2]] parse to [[(-1) + 2]]
test uminus [[2 * -1]] parse to [[2 * (-1)]]
tets uplus [[2 * +1]] parse to [[2 * (+1)]]
// test not [[y != !x]] parse to [[ y != (!x)]]

test op precedence [[x && y && z]] parse to [[(x && y) && z]]
test op precedence [[x < y < z]]   parse to [[(x < y) < z]]
test op precedence [[x > y > z]]   parse to [[(x > y) > z]]
// test op precedence [[x || y || z]] parse to [[(x || y) || z]]
// test op precedence [[x == y == z]] parse to [[(x == y) == z]]
// test op precedence [[x != y != z]] parse to [[(x != y) != z]]
// test op precedence [[x % y % z]]   parse to [[(x % y) % z]]
// test op precedence [[x <= y <= z]] parse to [[(x <= y) <= z]]
// test op precedence [[x >= y >= z]] parse to [[(x >= y) >= z]]

test op & arith [[x < y + z]] parse to [[(x < (y + z)]]
test op & arith [[x + !y]] parse to [[x + (!y)]]
test op & arith [[x < y * z]] parse to [[x < (y * z)]]
test op & arith [[z * !y]] parse to [[z * (!y)]]
// test mix op     [[z == y < x]] parse to [[z == (y < x)]]
// test mix op     [[z <= y < x]] parse to [[(z <= y) < x]]
// test mix op     [[z <= y && x == w]] parse to [[(z <= y) && (x == w)]]
// test mix op     [[z && y || x]] parse to [[(z && y) || x]]
test mix op     [[ z = y && x]] parse to [[z = (y && x)]]