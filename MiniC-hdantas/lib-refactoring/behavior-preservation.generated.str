/** 
* This module contains functions to detect name collisions and semantic constraint errors 
* caused by the (refactoring) transformation.
*/
module lib-refactoring/behavior-preservation.generated

imports
  lib/editor-common.generated
  lib-refactoring/analysis-multifile.generated
  lib-refactoring/namebinding-preservation.generated
  lib-refactoring/correctness-preservation.generated
  lib-refactoring/binding-violations.generated

strategies

  /**
   * Returns behavior preservation errors and warnings by analyzing changes in the static semantics of
   * the ASTs before- and after- the transformation. The analysis covers:
   * - name binding violation errors
   * - semantic-constraint errors and warnings
   * 
   * This rule applies to a tuple consisting of a list of ASTs before the refactoring transformation and 
   * a list of ASTs after the transformation. 
   * All ASTs that are possible (semantically or structurally) affected by the transformation must be included in both lists.
   * - The ASTs before the transformation contain name binding annotations set by 
   *   @see analyze-top(|language) or @see analyze-top-multifile(|language, project-path).
   * - the ASTs after the transformation contain name binding annotations that express the EXPECTED binding structure
   *   (typically obtained by preserving annos during transformation and setting annos for new inserted definitions and their use sites) 
   * - The ASTs after the transformation are later (re)analyzed by @see analyze-asts-multifile 
   *
   * Remark: performance can be improved in case the endangered names are known
   * @see semantic-violation-errors(constraint-error, constraint-warning, is-endangered-name) 
   *   or semantic-violation-errors(constraint-error, constraint-warning, is-endangered-name)
   *
   * @type (List(ast), List(ast)) -> (List(errors), List(warnings)
   * @param constraint-error    t -> (t, String)
   * @param constraint-warning  t -> (t, String)
   */
  semantic-violation-errors(constraint-error, constraint-warning):
    (asts-before-analyzed, asts-after) -> (errors, warnings)
    where
      (errors, warnings) := <semantic-violation-errors(constraint-error, constraint-warning, id)>

  /**
   * @see semantic-violation-errors(constraint-error, constraint-warning)
   * Improves the performance of name binding checks by only considering endangered names.
   *
   * @type (List(ast), List(ast)) -> (List(errors), List(warnings)
   * @param constraint-error    t -> (t, String)
   * @param constraint-warning  t -> (t, String)
   * @param endangered-names  List(String)
   */
  semantic-violation-errors(constraint-error, constraint-warning|endangered-names):
    (asts-before-analyzed, asts-after) -> <semantic-violation-errors(constraint-error, constraint-warning, is-in-list(|endangered-names'))>
    where
      endangered-names' := <map(strip-annos)> endangered-names
        
  /**
   * @see semantic-violation-errors(constraint-error, constraint-warning)
   * Improves the performance of name binding checks by only considering endangered names.
   *
   * @type (List(ast), List(ast)) -> (List(errors), List(warnings)
   * @param constraint-error    t -> (t, String)
   * @param constraint-warning  t -> (t, String)
   * @param is-endangered-name  String -> String
   */
  semantic-violation-errors(constraint-error, constraint-warning, is-endangered-name):
    (asts-before-analyzed, asts-after) -> (errors, warnings)
    where
      (errors, warnings) := 
        <semantic-violation-errors(constraint-error, constraint-warning, is-endangered-name, multifile-analyze-asts)>

  /**
   * @see semantic-violation-errors(constraint-error, constraint-warning)
   *
   * @type (List(ast), List(ast)) -> (List(errors), List(warnings)
   * @param constraint-error    t -> (t, String)
   * @param constraint-warning  t -> (t, String)
   * @param is-endangered-name  String -> String
   * @param analyze-multifile   List(ast) -> List(ast) stores semantic info in ASTs and name index
   */
  semantic-violation-errors(constraint-error, constraint-warning, is-endangered-name, analyze-multifile):
    (asts-before-analyzed, asts-after) -> (errors, warnings)
    where
      //errors and warnings on analyzed asts before the transformation
      errors-before   := <mapconcat(collect-all(constraint-error, conc))> asts-before-analyzed; 
      warnings-before := <mapconcat(collect-all(constraint-warning, conc))> asts-before-analyzed; 
      
      //errors and warnings on (re)analyzed asts after the transformation
      asts-after-analyzed := <analyze-multifile> asts-after;      
      errors-after   := <mapconcat(collect-all(constraint-error, conc))> asts-after-analyzed;
      warnings-after := <mapconcat(collect-all(constraint-warning, conc))> asts-after-analyzed;
      
      //errors and warnings by comparing the ASTs before- and after- the transformation      
      warnings := <compare-constraint-issues> (warnings-before, warnings-after);
      correctness-preservation-errors := <compare-constraint-issues> (errors-before, errors-after);
      namebinding-preservation-errors := <name-binding-violation-errors-on-trees(is-endangered-name)> (asts-after, asts-after-analyzed); 
      errors := <union(is-same-error-term)> (namebinding-preservation-errors, correctness-preservation-errors)

  //checks if semantic violations are reported for the same term.
  //prevents warnings about name binding violation errors that are also duplicate definition errors. 
  //@internal
  is-same-error-term:
    err-tup@((t1,_), (t2,_)) -> err-tup
    where
      <origin-equal(|t1)> t2 <+
      <origin-equal(|t2)> t1
  
  //backwards-compatibility
  get-semantic-violations(constraint-error, constraint-warning, is-endangered-name):
    ast-changes -> <semantic-violation-errors(constraint-error, constraint-warning, is-endangered-name)> <unzip> ast-changes
