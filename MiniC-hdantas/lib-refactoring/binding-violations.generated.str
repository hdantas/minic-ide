/**
 * Strategy to calculate binding violations by comparing binding annotations that 
 * express the actual and the intended binding structure.
 */
module lib-refactoring/binding-violations.generated

strategies 

  /**
   * @see binding-violation-terms(is-endangered-term)
   *
   * @type  (T, T) -> List(T{b1, b2})
   * @param endangered-terms  List with terms that must be checked for binding violations
   */
  binding-violation-terms(|endangered-terms) =
    binding-violation-terms(is-in-list(|endangered-terms))

  /**
   * Returns binding violations by comparing the expected binding structure with the actual binding structure
   * in the asts that result after the transformation.
   * Can be used to check for violations of name reference.
   * For performance reason, only the 'endangered' terms are compared.
   *
   * The input term must be a tuple (trm-intended-bindings, trm-actual-bindings) whereby
   * 1) both terms have the same abstract structure
   * 2) the trm-intended-bindings contains annotations that express the INTENDED binding structure
   *    (typically obtained by 'analyze; transform' whereby the transformation preserves the original annotations 
   *     and sets annotations for newly inserted terms)
   * 3) the trm-actual-bindings contain name annotations that express the ACTUAL binding structure
   *    (typically obtained by 'transform; analyze', i.e. reanalyzing the resulting asts)
   *
   * @type  (T, T) -> List(T{b1, b2})
   * @param is-endangered-term  String -> String
   */  
  binding-violation-terms(is-endangered-term):
    trees@(trm-intended-bindings, trm-actual-bindings) -> binding-violation-terms
    where
      binding-violation-terms := <
        bindings-construct-compare-ast;
        binding-violation-terms-internal(fail, is-endangered-term)
      > trees
  
   //Constructs an AST with information about the original binding structure, and the new binding structure.
   //Condition: 'trm-intended-bindings' and 'trm-actual-bindings' have the same structure and contain binding information.
  bindings-construct-compare-ast:
    (trm-intended-bindings, trm-actual-bindings) -> binding-compare-ast
    where
      binding-compare-ast := <merge-bindings>(trm-intended-bindings, trm-actual-bindings)
  
  //Returns binding violations by comparing the expected binding with the actual binding, 
  //both set as annotation on terms (t{b-intended, b-actual}) in the 'binding compare AST'.
  //For performance reason, only the 'endangered' terms are compared.
  binding-violation-terms-internal(uses-list-annos, is-endangered-term):
    binding-compare-ast -> binding-violations
    where 
      all-bindings := <
        bindings-collect-endangered-terms(is-endangered-term);
        filter(has-binding-info)
      > binding-compare-ast; 
      if not(uses-list-annos) then
        (binding-violations, _) := <bindings-partition-violations> all-bindings
      else
        (binding-violations, _) := <bindings-partition-violations-list-annos> all-bindings        
      end

  bindings-collect-endangered-terms(is-endangered-term):
    binding-compare-ast -> bindings-mapping
    where
      bindings-mapping := <
        collect-all(?_{_, _}; where(strip-annos; is-endangered-term), conc)
      > binding-compare-ast
  
  bindings-partition-violations:
    bindings -> (violated-bindings, binding-mapping)
    where
      (broken-bindings,  bindings-1)  := <partition(is-broken-binding)> bindings; 
      (created-bindings, bindings-2) := <partition(is-created-binding)> bindings-1;
      (changed-bindings, binding-mapping) := <partition-is-changed-binding> bindings-2;
      violated-bindings := <concat> [broken-bindings, created-bindings, changed-bindings]

  partition-is-changed-binding: 
    [t{b1,b2}|bindings] -> (conflicts, mapping)
    where 
      (related-bindings, unrelated-bindings) := <partition(?_{b1,_} <+ ?_{_,b2})> bindings;
      (rec-conflicts, rec-mapping):= <partition-is-changed-binding> unrelated-bindings;
      if <filter(not(?_{b1,b2})); ?[]> related-bindings then
        conflicts := rec-conflicts;
        mapping := [t{b1,b2}| rec-mapping]
      else
        conflicts := <conc> ([t{b1,b2}|related-bindings], rec-conflicts);
        mapping := rec-mapping
      end
  
  partition-is-changed-binding:
    [] -> ([], [])

  has-binding-info =
    has-annos;
    not(
      ?_{None(), None()} <+
      ?_{(),()} <+
      ?_{[],[]}
    )
  
  is-broken-binding =
    ?_{_, None()}; not(?_{None(), None()})

  is-broken-binding =
    ?_{_, ()}; not(?_{(),()})

  is-broken-binding =
    ?_{_, []}; not(?_{[],[]})
  
  is-created-binding =
    ?n{b1, b2}; 
    where(<is-broken-binding> n{b2, b1})


rules //helpers

  is-in-list(|lst):
    elem -> elem
    where
      <fetch(strip-annos; equal(|<strip-annos> elem))> lst

  //@internal    
  merge-bindings =
    merge-bindings-1 <+
    merge-bindings-2 <+
    merge-bindings-3 <+
    merge-bindings-4
  
  //@internal    
  merge-bindings-1:
    (s1{b1}, s2{b2}) -> s1{b1, b2}
    where
      <equal> (s1{},s2{})
  
  //@internal    
  merge-bindings-2:
    (s1{b1}, s2{}) -> s1{b1, None()}
    where
      <equal> (s1{},s2{})
  
  //@internal    
  merge-bindings-3:
    (s1{}, s2{b2}) -> s1{None(), b2}
    where
      <equal> (s1{},s2{})
  
  //@internal    
  merge-bindings-4:
    (c#(args1), c#(args2)) -> c#(args) 
    where
      args := <zip; map(merge-bindings)> (args1, args2)
      
rules //support for list annotations with the restriction 'single-anno-declarations + mult-anno-reads'

  /**
   * @see binding-violation-terms-list-annos(is-endangered-term)
   *
   * @type  (T, T) -> List(T{b1, b2})
   * @param endangered-terms  List with terms that must be checked for binding violations
   */
  binding-violation-terms-list-annos(|endangered-terms) =
    binding-violation-terms-list-annos(is-in-list(|endangered-terms))

  /**
   * Returns binding violations by comparing the expected binding structure with the actual binding structure
   * in the asts that result after the transformation.
   * Can be used to check for violations of data-flow where a term can have multiple predecessors.
   * For performance reason, only the 'endangered' terms are compared.
   *
   * The input term must be a tuple (trm-intended-bindings, trm-actual-bindings) whereby
   * 1) both terms have the same abstract structure
   * 2) the trm-intended-bindings contains annotations that express the INTENDED binding structure
   *    (typically obtained by 'analyze; transform' whereby the transformation preserves the original annotations 
   *     and sets annotations for newly inserted terms)
   * 3) the trm-actual-bindings contain name annotations that express the ACTUAL binding structure
   *    (typically obtained by 'transform; analyze', i.e. reanalyzing the resulting asts)
   * 4) TODO: for now it only works well in case the binding mapping can be constructed by considering single-anno elems only
   *
   * @type  (T, T) -> List(T{b1, b2})
   * @param is-endangered-term  String -> String
   */  
  binding-violation-terms-list-annos(is-endangered-term):
    trees@(trm-intended-bindings, trm-actual-bindings) -> binding-violation-terms
    where
      binding-violation-terms := <
        bindings-construct-compare-ast;
        binding-violation-terms-internal(id, is-endangered-term)
      > trees


  //Assumption: 'declarations' are single element (lists), 'reads' can be multiple element lists
  //The single element lists determine the mapping (and may have violations), reads are checked for violations
  //REMARK: useful for flow analysis where a read-access can have multiple predecessors
  bindings-partition-violations-list-annos:
    bindings -> (binding-violations, mapping)
    where
      (broken-list-bindings, bindings-1)  := <partition(is-broken-list-binding)> bindings; 
      (created-list-bindings, bindings-2)  := <partition(is-created-list-binding)> bindings-1; 
      list-bindings := <map(try(binding-single-to-list))> bindings-2;
      (changed-list-bindings, mapping) := <bindings-partition-violations-list-annos-2> list-bindings;
      binding-violations := <concat> [broken-list-bindings, created-list-bindings, changed-list-bindings]
  
  //@internal
  bindings-partition-violations-list-annos-2:
    list-bindings -> (binding-violations, mapping)
    with
      map({lb1, lb2: (?_{lb1, lb2}; <eq>(<length> lb1, <length> lb2))})
    where 
      (singleton-bindings, multiple-bindings) := <partition(?_{[_], [_]})> list-bindings; 
      (singleton-violations, singleton-mappings) := <bindings-partition-violations> singleton-bindings; 
      (multiple-bindings', list-violations) := <partition(filter-all-bindings-from-list-binding(|singleton-mappings))> multiple-bindings; 
      if <not(equal)> (multiple-bindings', multiple-bindings) then
        (rec-violations, rec-mapping) := <bindings-partition-violations-list-annos-2> multiple-bindings'
      else //TODO: we can not detect violations such as the 'a' in t{[a, b], [r, s]} and t{[a, c], [t, u]}
        (rec-violations, rec-mapping) := <bindings-partition-violations> multiple-bindings' 
        //detects '[a,b]' in t{[a, b], [r, s]} and t{[a, b], [r, u]}
      end;
      mapping := <conc>(singleton-mappings, rec-mapping);
      binding-violations := <concat> [singleton-violations, list-violations, rec-violations]
  
  
  filter-all-bindings-from-list-binding(|binding-mapping):
    lst-binding@t{b_lst1, b_lst2} -> lst-binding'
    where
      lst-binding' := <foldr(!lst-binding, filter-binding-mapping-from-list-binding)> binding-mapping
    
  filter-binding-mapping-from-list-binding:
    (_{[b1], [b2]}, t{b_lst1, b_lst2}) -> t{b_lst1', b_lst2'}
    where
      (matched-1, b_lst1') := <partition(?b1)> b_lst1;
      (matched-2, b_lst2') := <partition(?b2)> b_lst2;
      <eq>(<length> matched-1, <length> matched-2)
    

  is-broken-list-binding:
    t{lb1, lb2} -> t{lb1, lb2}
    where
      <gt>(<length> lb1, <length> lb2)

  is-broken-list-binding:
    t{lb1, lb2} -> t{lb1, lb2}
    where
      <is-list> lb1;
      <not(is-list)> lb2

  is-created-list-binding:
    t{lb1, lb2} -> t{lb1, lb2}
    where
      <is-broken-list-binding> t{lb2, lb1}
      
  binding-single-to-list:
    t{b1, b2} -> t{[b1], [b2]}
    where
      <not(is-list)> b1;
      <not(is-list)> b2