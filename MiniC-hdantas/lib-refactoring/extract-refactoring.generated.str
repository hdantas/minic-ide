/** 
* Language generic components for Extract refactorings
*/
module lib-refactoring/extract-refactoring.generated

imports
  lib-refactoring/list-operations.generated
  lib-refactoring/binding-violations.generated 
  lib/analysis-library-internal.generated 
  lib-refactoring/fetch-positions.generated
  
rules
  
  /**
   * Applies the extract transformation, that is: 
   * - inserts the extracted construct after the construct where the extraction takes place, and
   * - replaces the selected elements with a list of new elements (such as missing declarations and a call to the extracted construct) 
   *
   * @param match-construct: matches definitions of the extracted sort
   * @param replacing-terms: List(T), replaces the selected terms
   * @param extracted-construct: construct that is extracted
   * @type (List(T), ast) -> ast
   */  
  extract-transformation(match-construct|replacing-terms, extracted-construct):
    (selected, ast) -> ast-transformed
    where
      (from, to) := <position-of-sublist-from-to(|ast)> selected;
      pos-original-method := <fetch-up-position(match-construct|ast)> from;
      pos-extracted-construct := <position-next-sibling> pos-original-method;
      ast-transformed := <
        replace-sublist(|from, to, replacing-terms);
        insert-list-element(|pos-extracted-construct, extracted-construct)
      > ast

  /**
   * @see extract-method-analysis(is-method-definition, analyze-dataflow, get-declaration-name)
   * @type (List(T), ast) -> (List(VarDecl), List(VarDecl), List(VarDecl), List(VarDecl))
   */    
  extract-method-analysis(is-method-definition, analyze-dataflow) =
    extract-method-analysis(is-method-definition, analyze-dataflow, nam-get-definition-key)

  /**
   * Calculates the required information to repair the data-flow after method extractions.
   * Repair consists of inserting missing declarations (preferrable), or passing variable values
   * in the form of (in-)parameters and return values (out-parameters).
   *
   * Determines the missing declarations in the remainder of the original method and the extracted method.
   * - missing-vardecls-original: declarations of variables that are used in the remainder of the original method, 
   *   but declared in the extracted method
   * - missing-vardecls-extracted: declarations of variables that are used in the extracted method, 
   *   but declared in the remainder of the original method (and not passed as a parameter).
   *
   * Determines the required in- and out- parameters based on a data-flow analysis
   * - in-parameter-vardecls: declarations of variables that are used in the extracted method, 
   *   after being assigned in the remainder of the original method 
   * - out-parameter-vardecls: declarations of variables that are used in the remainder of the original method, 
   *   after being assigned in the extracted method 
   *
   * @param is-method-definition: matches method definitions
   * @param analyze-dataflow: sets data-flow annotations on variable names, so that: 
   *  - variables with the same df-anno have the same value, e.g., 
   *    VarDecl("a{df-x}"); VarAssign("a{df-y}"); VarUse("a{df-y}")
   *  - multiple df-annos can be set to represent different control flows, e.g., 
   *    If(c, VarAssign("a{df-x}");, VarAssign("a{df-y}");); VarUse("a{[df-x, df-y]}")
   *   
   * @param get-declaration-name: maps a declaration onto its name (fails for terms that are not declarations)
   * @type (List(T), ast) -> (List(VarDecl), List(VarDecl), List(VarDecl), List(VarDecl))
   */    
  extract-method-analysis(is-method-definition, analyze-dataflow, get-declaration-name):
    (selected, ast) -> (missing-vardecls-original, missing-vardecls-extracted,  in-parameter-vardecls, out-parameter-vardecls)
    where
      (pos-from-ast, _) := <position-of-sublist-from-to(|ast)> selected;
      method := <fetch-up-term(is-method-definition|ast)> pos-from-ast; 
      (from, to) := <position-of-sublist-from-to(|method)> selected;
      (missing-vardecls-original, missing-vardecls-extracted') :=
        <extract-method-missing-declarations(get-declaration-name)> (method, from, to);
      (in-parameter-vardecls, out-parameter-vardecls) :=
        <extract-method-parameters(analyze-dataflow, get-declaration-name)> (method, from, to);
      missing-vardecls-extracted := <diff>(missing-vardecls-extracted', in-parameter-vardecls) //exclude in-parameters from the list of missing vardecls


rules //helper rules to perform the required data-flow analyses for method extraction 

  /**
   * Determines the missing declarations in the remainder of the original method and the extracted method.
   * - missing-vardecls-original: declarations of variables that are used in the remainder of the original method, 
   *   but declared in the extracted method
   * - missing-vardecls-extracted: declarations of variables that are used in the extracted method, 
   *   but declared in the remainder of the original method (and not passed as a parameter).
   *
   * @param get-declaration-name: maps a declaration onto its name (fails for terms that are not declarations)
   * @type (T, List(Int), List(Int)) -> (List(VarDecl), List(VarDecl))
   */    
  extract-method-missing-declarations(get-declaration-name):
    (method, from, to) -> (missing-vardecls-original, missing-vardecls-extracted)
    where
      missing-vardecls-original  := <get-missing-declarations(remove-sublist(|from, to), get-declaration-name)> method;
      missing-vardecls-extracted := <get-missing-declarations(select-sublist(|from, to), get-declaration-name)> method

  get-missing-declarations(transform, get-declaration-name):
    term-before -> missing-declarations
    where
      term-after := <transform> term-before; 
      declarations-before := <collect-all(where(get-declaration-name))> term-before;
      declarations-after := <collect-all(where(get-declaration-name))> term-after;
      lost-declarations := <diff(where(all(get-declaration-name); eq))> (declarations-before, declarations-after);
      variables-after := <collect-all(is-string)> term-after;
      missing-declarations := <filter(where(!(<get-declaration-name>, variables-after); elem))> lost-declarations
  
  /**
   * Determines the required in- and out- parameters based on a data-flow analysis
   * - in-parameters: variables that are used in the extracted method, after being assigned in the remainder of the original method 
   * - out-parameters: variables that are used in the remainder of the original method, after being assigned in the extracted method 
   *
   * @param analyze-dataflow: sets data-flow annotations on variable names, so that: 
   *  - variables with the same df-anno have the same value, e.g., 
   *    VarDecl("a{df-x}"); VarAssign("a{df-y}"); VarUse("a{df-y}")
   *  - multiple df-annos can be set to represent different control flows, e.g., 
   *    If(c, VarAssign("a{df-x}");, VarAssign("a{df-y}");); VarUse("a{[df-x, df-y]}")
   *   
   * @param get-declaration-name: maps a declaration onto its name (fails for terms that are not declarations)
   * @type (T, List(Int), List(Int)) -> (List(VarDecl), List(VarDecl))
   */    
  extract-method-parameters(analyze-dataflow, get-declaration-name):
    (method, from, to) -> (in-parameter-vardecls, out-parameter-vardecls)
    where
      in-parameter-vardecls := <get-df-changed-declarations(select-sublist(|from, to), get-declaration-name, analyze-dataflow)> method;
      out-parameter-vardecls := <get-df-changed-declarations(remove-sublist(|from, to), get-declaration-name, analyze-dataflow) > method

  get-df-changed-declarations(transform, get-declaration-name, analyze-dataflow):
    term -> df-changed-declarations
    where
      declarations := <collect-all(where(get-declaration-name))> term;
      declaration-names := <map(get-declaration-name)> declarations;
      df-changes := <get-df-changes(transform, analyze-dataflow|declaration-names); map(strip-annos); make-set> term;
      df-changed-declarations := <filter(where(get-declaration-name; is-in-list(|df-changes)))> declarations

  //Calculates df-changes by comparing INTENDED and ACTUAL 
  //dataflow annotations in the tree after transformation.
  //Intended df-annos are obtained via <analyze; transform>,
  //actual df-annos are obtained via <transform; analyze>
  get-df-changes(transform, analyze-dataflow|declaration-names):
    term-before -> df-changes
    where
      term-after-df-intended := <analyze-dataflow; transform> term-before; 
      term-after-df-actual := <transform; analyze-dataflow> term-before; 
      //df-changes := <binding-violation-terms(|declaration-names)>(term-after-df-intended, term-after-df-actual)
      df-changes := <binding-violation-terms-list-annos(|declaration-names)>(term-after-df-intended, term-after-df-actual)