definition
module MiniC-ContextFree
imports MiniC-Lexical

exports
  context-free syntax
    TypeDec* VarDec* FunctionDec* Exp                                    -> Program     {cons("File")}
    "struct" ID "{" FieldDec* "};"                                       -> TypeDec     {cons("StructDec")}
    Type ID ";"                                                          -> FieldDec    {cons("FieldDec")}
    ArrayType ID "[" INT "];"                                            -> FieldDec    {cons("FieldArrayDec")}
    Type ID ";"                                                          -> VarDec      {cons("VarDec")}
    ArrayType ID "[" INT "];"                                            -> VarDec      {cons("ArrayDec")}
    Type ID "(" {Parameter ","}* ")" "{" Statement* "return" Exp ";" "}" -> FunctionDec {cons("FunctionDef")}
    Type ID                                                              -> Parameter   {cons("Arg")}
    ArrayType ID "[]"                                                    -> Parameter   {cons("ArrayArg")}
    "int"                                                                -> ArrayType   {cons("ArrayInt")}
    "float"                                                              -> ArrayType   {cons("ArrayFloat")}
    "int"                                                                -> Type        {cons("Int")}
    "float"                                                              -> Type        {cons("Float")}
    "struct" ID                                                          -> Type        {cons("Struct")}
    VarDec                                                               -> Statement   
    Lvalue "=" Exp ";"                                                   -> Statement   {cons("Assignment")}
    "if" "(" Exp ")" Statement "else" Statement                          -> Statement   {cons("IfElse")}
    "while" "(" Exp ")" Statement                                        -> Statement   {cons("While")}
    "printf(" "\"" "%i" "\"" "," Exp ");"                                -> Statement   {cons("PrintfInt")}
    "printf(" "\"" "%f" "\"" "," Exp ");"                                -> Statement   {cons("PrinfFloat")}
    "{" Statement* "}"                                                   -> Statement   {cons("CodeBlock")}
    OCTAL                                                                -> Exp         {cons("OctalConst")}
    INT                                                                  -> Exp         {cons("IntConst")}
    FLOAT                                                                -> Exp         {cons("FloatConst")}
    ID                                                                   -> Lvalue      {cons("Var")}
    Lvalue "." Lvalue                                                    -> Lvalue      {cons("StructMember"), left}
    Lvalue "[" Exp "]"                                                   -> Lvalue      {cons("ArrayVar")}
    Lvalue                                                               -> Exp         
    Exp "&&" Exp                                                         -> Exp         {cons("And"), left}
    Exp "<" Exp                                                          -> Exp         {cons("Lt"), non-assoc}
    Exp "+" Exp                                                          -> Exp         {cons("Add"), left}
    Exp "-" Exp                                                          -> Exp         {cons("Subtract"), left}
    Exp "*" Exp                                                          -> Exp         {cons("Multiply"), left}
    "!" Exp                                                              -> Exp         {cons("Not")}
    "(" Exp ")"                                                          -> Exp         {bracket}
    "sizeof" "(" Exp ")"                                                 -> Exp         {cons("Sizeof")}
    ID "(" {Exp ","}* ")"                                                -> Exp         {cons("Call")}
    "-" Exp                                                              -> Exp         {cons("Uminus")}
    "+" Exp                                                              -> Exp         {cons("Uplus")}

  context-free syntax
    CONTENTCOMPLETE -> Program     {cons("COMPLETION-Program")}
    CONTENTCOMPLETE -> TypeDec     {cons("COMPLETION-TypeDec")}
    CONTENTCOMPLETE -> FieldDec    {cons("COMPLETION-FieldDec")}
    CONTENTCOMPLETE -> VarDec      {cons("COMPLETION-VarDec")}
    CONTENTCOMPLETE -> FunctionDec {cons("COMPLETION-FunctionDec")}
    CONTENTCOMPLETE -> Parameter   {cons("COMPLETION-Parameter")}
    CONTENTCOMPLETE -> ArrayType   {cons("COMPLETION-ArrayType")}
    CONTENTCOMPLETE -> Type        {cons("COMPLETION-Type")}
    CONTENTCOMPLETE -> Statement   {cons("COMPLETION-Statement")}
    CONTENTCOMPLETE -> Lvalue      {cons("COMPLETION-Lvalue")}
    CONTENTCOMPLETE -> Exp         {cons("COMPLETION-Exp")}

  lexical restrictions
    "return" "int" "float" "struct" "if" "else" "while" "sizeof" -/- [a-zA-Z]

  context-free priorities
    { "-" Exp -> Exp
      "+" Exp -> Exp } >
    {left:
      Exp "*" Exp -> Exp
    } >
    {left:
      Exp "+" Exp -> Exp
      Exp "-" Exp -> Exp
    } >
    {non-assoc:
      Exp "<" Exp -> Exp
    } >
    {left:
      Exp "&&" Exp -> Exp
    }

module MiniC-Lexical
exports
  lexical syntax
    [a-zA-Z] [a-zA-Z0-9\_]*            -> ID           
    "0"                                -> INT          
    [1-9] [0-9]*                       -> INT          
    [0] [0-7]+                         -> OCTAL        
    [0-9]+ [eE] [0-9]+                 -> FLOAT        
    [0-9]+ "." [0-9]+ ( [eE] [0-9]+ )? -> FLOAT        
    "." [0-9]+ ( [eE] [0-9]+ )?        -> FLOAT        
    [0-9]+ "." ( [eE] [0-9]+ )?        -> FLOAT        
    [\ \t\n\r]                         -> LAYOUT       
    Comment                            -> LAYOUT       
    "//" ~[\n\r]* [\n\r] | EOF         -> Comment      
    BlockComment                       -> Comment      
    "/*" CommentPart* "*/"             -> BlockComment 
    ~[\/\*]                            -> CommentPart  
    Asterisk                           -> CommentPart  
    ForwardSlash                       -> CommentPart  
    BlockComment                       -> CommentPart  
    [\*]                               -> Asterisk     
    [\/]                               -> ForwardSlash 
                                       -> EOF          

  lexical restrictions
    ID -/- [a-zA-Z0-9\_]
    INT -/- [0-9]
    OCTAL -/- [0-7]
    FLOAT -/- [0-9]
    Asterisk -/- [\/]
    ForwardSlash -/- [\*]
    EOF -/- ~[]

  context-free restrictions
    LAYOUT? -/- [\ \t\n\r]
    Comment? -/- [\/] . [\/]
    Comment? -/- [\/] . [\*]

  lexical syntax
    "auto"     -> ID {reject}
    "break"    -> ID {reject}
    "case"     -> ID {reject}
    "char"     -> ID {reject}
    "const"    -> ID {reject}
    "continue" -> ID {reject}
    "default"  -> ID {reject}
    "do"       -> ID {reject}
    "double"   -> ID {reject}
    "else"     -> ID {reject}
    "enum"     -> ID {reject}
    "extern"   -> ID {reject}
    "float"    -> ID {reject}
    "for"      -> ID {reject}
    "goto"     -> ID {reject}
    "if"       -> ID {reject}
    "int"      -> ID {reject}
    "long"     -> ID {reject}
    "register" -> ID {reject}
    "return"   -> ID {reject}
    "short"    -> ID {reject}
    "signed"   -> ID {reject}
    "sizeof"   -> ID {reject}
    "static"   -> ID {reject}
    "struct"   -> ID {reject}
    "switch"   -> ID {reject}
    "typedef"  -> ID {reject}
    "union"    -> ID {reject}
    "unsigned" -> ID {reject}
    "void"     -> ID {reject}
    "volatile" -> ID {reject}
    "while"    -> ID {reject}
    "null"     -> ID {reject}
    "NULL"     -> ID {reject}

module MiniC
imports MiniC-Lexical MiniC-ContextFree

exports
  context-free start-symbols
    Program