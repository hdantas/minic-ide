Module("MiniC.main.packed",Imports([Import("MiniC.main"),Import("MiniC-Builders"),Import("MiniC-Refactorings"),Import("MiniC-Colorer"),Import("MiniC-Completions"),Import("MiniC-Folding"),Import("MiniC-Outliner"),Import("MiniC-References"),Import("MiniC-Syntax"),Import("MiniC-Builders.generated"),Import("MiniC-Refactorings.generated"),Import("MiniC-Colorer.generated"),Import("MiniC-Completions.generated"),Import("MiniC-ContextFree.generated"),Import("MiniC-Lexical.generated"),Import("MiniC-Folding.generated"),Import("MiniC-Outliner.generated"),Import("MiniC-References.generated"),Import("MiniC-Syntax.generated")]),[Language(" General properties",[LanguageName("MiniC"),LanguageId("MiniChdantas"),Extends(Values(["Root"])),Description(String("\"Spoofax/IMP-generated editor for the MiniC language\"")),URL("http://strategoxt.org"),Extensions(Values(["mic"])),Table("include/MiniC.tbl"),StartSymbols([Sort("Program")])]),Builders("",[SemanticProvider("include/minic.ctree"),SemanticProvider("include/minic-java.jar"),SemanticObserver(Strategy("editor-analyze"),[MultiFile]),Builder(String("\"Show abstract syntax\""),Strategy("debug-generate-aterm"),[OpenEditor,RealTime,Meta,Source]),Builder(String("\"Show deffed syntax\""),Strategy("debug-generate-deffed"),[OpenEditor,RealTime,Meta,Source]),Builder(String("\"Show analyzed syntax\""),Strategy("debug-generate-analyzed"),[OpenEditor,RealTime,Meta,Source]),Builder(String("\"Show index entries for current file\""),Strategy("debug-index-show-current-file"),[OpenEditor,RealTime,Meta,Source]),Builder(String("\"Show index entries for all files\""),Strategy("debug-index-show-all-files"),[OpenEditor,RealTime,Meta,Source]),Builder(String("\"Clear index for current file\""),Strategy("debug-index-clear-current"),[Meta,Source]),Builder(String("\"Clear index\""),Strategy("debug-index-clear"),[Meta,Source]),Builder(String("\"Reload index\""),Strategy("debug-index-reload"),[Meta,Source]),Builder(String("\"Pretty-print\""),Strategy("pp-builder"),[Source,OpenEditor]),Builder(String("\"Desugar AST (selection)\""),Strategy("editor-desugar"),[OpenEditor,RealTime,Meta,Source]),OnSave(Strategy("editor-save"),None)]),Refactorings("",[PrettyPrint(Strategy("pp-minic-string"))]),KeyBindings(" Predefined Keybindings",[KeyBinding(KeyCombination(["Shift","Alt","R"]),String("\"org.eclipse.jdt.ui.edit.text.java.rename.element\"")),KeyBinding(KeyCombination(["Shift","Alt","I"]),String("\"org.eclipse.jdt.ui.edit.text.java.inline\"")),KeyBinding(KeyCombination(["Shift","Alt","M"]),String("\"org.eclipse.jdt.ui.edit.text.java.extract.method\"")),KeyBinding(KeyCombination(["Shift","Alt","V"]),String("\"org.eclipse.jdt.ui.move.method\"")),KeyBinding(KeyCombination(["Shift","Alt","C"]),String("\"org.eclipse.jdt.ui.change.method.signature\"")),KeyBinding(KeyCombination(["Shift","Alt","L"]),String("\"org.eclipse.jdt.ui.edit.text.java.extract.local.variable\"")),KeyBinding(KeyCombination(["Shift","Ctrl","F"]),String("\"org.eclipse.jdt.ui.edit.text.java.format\"")),KeyBinding(KeyCombination(["Ctrl","I"]),String("\"org.eclipse.jdt.ui.edit.text.java.indent\"")),KeyBinding(KeyCombination(["Shift","Ctrl","C"]),String("\"org.eclipse.jdt.ui.edit.text.java.toggle.comment\"")),KeyBinding(KeyCombination(["Shift","Ctrl","M"]),String("\"org.eclipse.jdt.ui.edit.text.java.add.import\"")),KeyBinding(KeyCombination(["Shift","Ctrl","O"]),String("\"org.eclipse.jdt.ui.edit.text.java.organize.imports\""))]),Colorer(" Default, token-based highlighting",[ColorRule(Token(TK_KEYWORD),Attribute(ColorRGB("127","0","85"),NoColor,BOLD)),ColorRule(Token(TK_IDENTIFIER),AttributeRef("default")),ColorRule(Token(TK_STRING),AttributeRef("blue")),ColorRule(Token(TK_NUMBER),AttributeRef("darkgreen")),ColorRule(Token(TK_VAR),Attribute(ColorRGB("255","0","100"),NoColor,ITALIC)),ColorRule(Token(TK_OPERATOR),Attribute(ColorRGB("0","0","128"),NoColor,NORMAL)),ColorRule(Token(TK_LAYOUT),Attribute(ColorRGB("63","127","95"),NoColor,ITALIC))]),Colorer(" System colors",[ColorDef("darkred",Attribute(ColorRGB("128","0","0"),NoColor,NORMAL)),ColorDef("red",Attribute(ColorRGB("255","0","0"),NoColor,NORMAL)),ColorDef("darkgreen",Attribute(ColorRGB("0","128","0"),NoColor,NORMAL)),ColorDef("green",Attribute(ColorRGB("0","255","0"),NoColor,NORMAL)),ColorDef("darkblue",Attribute(ColorRGB("0","0","128"),NoColor,NORMAL)),ColorDef("blue",Attribute(ColorRGB("0","0","255"),NoColor,NORMAL)),ColorDef("cyan",Attribute(ColorRGB("0","255","255"),NoColor,NORMAL)),ColorDef("magenta",Attribute(ColorRGB("255","0","255"),NoColor,NORMAL)),ColorDef("yellow",Attribute(ColorRGB("255","255","0"),NoColor,NORMAL)),ColorDef("white",Attribute(ColorRGB("255","255","255"),NoColor,NORMAL)),ColorDef("black",Attribute(ColorRGB("0","0","0"),NoColor,NORMAL)),ColorDef("gray",Attribute(ColorRGB("128","128","128"),NoColor,NORMAL)),ColorDef("grey",AttributeRef("gray")),ColorDef("orange",Attribute(ColorRGB("255","165","0"),NoColor,NORMAL)),ColorDef("pink",Attribute(ColorRGB("255","105","180"),NoColor,NORMAL)),ColorDef("brown",Attribute(ColorRGB("139","69","19"),NoColor,NORMAL)),ColorDef("default",Attribute(ColorDefault,NoColor,NORMAL))]),Completions("",[CompletionKeyword(String("\"int\""),None),CompletionKeyword(String("\"float\""),None),CompletionKeyword(String("\"main\""),None),CompletionKeyword(String("\"if\""),None),CompletionKeyword(String("\"else\""),None),CompletionKeyword(String("\"while\""),None),CompletionKeyword(String("\"return\""),None),CompletionProposer([],Strategy("editor-complete")),CompletionTrigger(String("\".\""),None),CompletionTemplateEx([Sort("Statement")],CompletionPrefix(String("\"if (Condition) {Statement} else {Statement}\"")),[String("\"if (\""),PlaceholderWithSort("<Condition:","Exp"),String("\")\\n\\t{\\n\\t\""),PlaceholderWithSort("<Statement:","Statement"),String("\"\\n\\t}\\nelse\\n\\t{\\n\\t\""),PlaceholderWithSort("<Statement:","Statement"),String("\"\\n\\t}\\n\"")],[Blank]),CompletionTemplateEx([Sort("Statement")],CompletionPrefix(String("\"while (Condition) {Statement}\"")),[String("\"while (\""),PlaceholderWithSort("<Condition:","Exp"),String("\")\\n\\t{\\n\\t\""),PlaceholderWithSort("<Statement:","Statement"),String("\"\\n\\t}\\n\"")],[Blank]),CompletionTemplateEx([Sort("FunctionDec")],CompletionPrefix(String("\"int main () { return Return value; }\"")),[String("\"int main ()\\n\\t{\\n\\treturn \""),PlaceholderWithSort("<Return value:","Exp"),String("\";\\n\\t}\"")],[Blank]),CompletionTemplateEx([Sort("Comment")],CompletionPrefix(String("\"File Header (File Name, Author, Date)\"")),[String("\"/*\\n* File: \""),PlaceholderWithSort("<FileName:","Comment"),String("\".c\\n* Author: \""),PlaceholderWithSort("<Name:","Comment"),String("\"\\n*\\n* Date: \""),PlaceholderWithSort("<Date:","Comment"),String("\"\\n*/\\n\"")],[Blank])]),Completions("",[CompletionKeyword(String("\"%i\""),None),CompletionKeyword(String("\"%f\""),None)]),Completions("",[CompletionTemplateEx([Sort("TypeDec")],CompletionPrefix(String("\"struct StructName { StructMembers };\"")),[String("\"struct \""),PlaceholderWithSort("<StructName:","ID"),String("\"\\n\\t{\\n\\t\""),PlaceholderWithSort("<StructMembers:","VarDec"),String("\"\\n\\t};\"")],[Blank]),CompletionTemplateEx([Sort("VarDec")],CompletionPrefix(String("\"Type VarName;\"")),[PlaceholderWithSort("<Type:","Type"),String("\" \""),PlaceholderWithSort("<VarName:","ID"),String("\";\"")],[]),CompletionTemplateEx([Sort("VarDec")],CompletionPrefix(String("\"Type ArrayName[NumberElements];\"")),[PlaceholderWithSort("<Type:","ArrayType"),String("\" \""),PlaceholderWithSort("<ArrayName:","ID"),String("\"[\""),PlaceholderWithSort("<NumberElements:","INT"),String("\"];\"")],[]),CompletionTemplateEx([Sort("FunctionDec")],CompletionPrefix(String("\"ReturnType FuncName (Arguments) { return Return value; }\"")),[PlaceholderWithSort("<ReturnType:","Type"),String("\" \""),PlaceholderWithSort("<FuncName:","ID"),String("\" (\""),PlaceholderWithSort("<Arguments:","Parameter"),String("\")\\n\\t{\\n\\treturn \""),PlaceholderWithSort("<Return value:","Exp"),String("\";\\n\\t}\"")],[Blank]),CompletionTemplateEx([Sort("Parameter")],CompletionPrefix(String("\"Type Name\"")),[PlaceholderWithSort("<Type:","Type"),String("\" \""),PlaceholderWithSort("<Name:","ID")],[]),CompletionTemplateEx([Sort("Parameter")],CompletionPrefix(String("\"Type Name[]\"")),[PlaceholderWithSort("<Type:","ArrayType"),String("\" \""),PlaceholderWithSort("<Name:","ID"),String("\"[]\"")],[]),CompletionTemplateEx([Sort("ArrayType")],CompletionPrefix(String("\"int\"")),[String("\"int\"")],[]),CompletionTemplateEx([Sort("ArrayType")],CompletionPrefix(String("\"float\"")),[String("\"float\"")],[]),CompletionTemplateEx([Sort("Type")],CompletionPrefix(String("\"struct StructName\"")),[String("\"struct \""),PlaceholderWithSort("<StructName:","ID")],[]),CompletionTemplateEx([Sort("Statement")],CompletionPrefix(String("\"Var = Exp;\"")),[PlaceholderWithSort("<Var:","ID"),String("\" = \""),PlaceholderWithSort("<Exp:","Exp"),String("\";\"")],[]),CompletionTemplateEx([Sort("Statement")],CompletionPrefix(String("\"ArrayName[Index] = Exp;\"")),[PlaceholderWithSort("<ArrayName:","ID"),String("\"[\""),PlaceholderWithSort("<Index:","Exp"),String("\"] = \""),PlaceholderWithSort("<Exp:","Exp"),String("\";\"")],[]),CompletionTemplateEx([Sort("Statement")],CompletionPrefix(String("\"StructName.StructMember = Exp;\"")),[PlaceholderWithSort("<StructName:","ID"),String("\".\""),PlaceholderWithSort("<StructMember:","ID"),String("\" = \""),PlaceholderWithSort("<Exp:","Exp"),String("\";\"")],[]),CompletionTemplateEx([Sort("Statement")],CompletionPrefix(String("\"if (Condition) Statement else Statement \"")),[String("\"if (\""),PlaceholderWithSort("<Condition:","Exp"),String("\")\\n\\t\""),PlaceholderWithSort("<Statement:","Statement"),String("\"\\nelse\\n\\t\""),PlaceholderWithSort("<Statement:","Statement"),String("\"\\n\"")],[Blank]),CompletionTemplateEx([Sort("Statement")],CompletionPrefix(String("\"while (Condition) Statement \"")),[String("\"while (\""),PlaceholderWithSort("<Condition:","Exp"),String("\")\\n\\t\""),PlaceholderWithSort("<Statement:","Statement"),String("\"\\n\"")],[Blank]),CompletionTemplateEx([Sort("Statement")],CompletionPrefix(String("\"printf(\\\"%i\\\", IntegerVar);\"")),[String("\"printf(\\\"%i\\\", \""),PlaceholderWithSort("<IntegerVar:","Exp"),String("\");\"")],[]),CompletionTemplateEx([Sort("Statement")],CompletionPrefix(String("\"printf(\\\"%f\\\", FloatVar);\"")),[String("\"printf(\\\"%f\\\", \""),PlaceholderWithSort("<FloatVar:","Exp"),String("\");\"")],[]),CompletionTemplateEx([Sort("Statement")],CompletionPrefix(String("\"{ }\"")),[String("\"{\\n\""),Cursor,String("\"\\n}\"")],[Blank]),CompletionTemplateEx([Sort("Lvalue")],CompletionPrefix(String("\"StructName.StructMember\"")),[PlaceholderWithSort("<StructName:","Lvalue"),String("\".\""),PlaceholderWithSort("<StructMember:","Lvalue")],[]),CompletionTemplateEx([Sort("Lvalue")],CompletionPrefix(String("\"ArrayName[Index]\"")),[PlaceholderWithSort("<ArrayName:","ID"),String("\"[\""),PlaceholderWithSort("<Index:","Exp"),String("\"]\"")],[]),CompletionTemplateEx([Sort("Exp")],CompletionPrefix(String("\"Value && Value\"")),[PlaceholderWithSort("<Value:","Exp"),String("\" && \""),PlaceholderWithSort("<Value:","Exp")],[]),CompletionTemplateEx([Sort("Exp")],CompletionPrefix(String("\"Value < Value\"")),[PlaceholderWithSort("<Value:","Exp"),String("\" < \""),PlaceholderWithSort("<Value:","Exp")],[]),CompletionTemplateEx([Sort("Exp")],CompletionPrefix(String("\"Addend + Addend\"")),[PlaceholderWithSort("<Addend:","Exp"),String("\" + \""),PlaceholderWithSort("<Addend:","Exp")],[]),CompletionTemplateEx([Sort("Exp")],CompletionPrefix(String("\"Minuend - Subtrahend\"")),[PlaceholderWithSort("<Minuend:","Exp"),String("\" - \""),PlaceholderWithSort("<Subtrahend:","Exp")],[]),CompletionTemplateEx([Sort("Exp")],CompletionPrefix(String("\"Multiplicand * Multiplier\"")),[PlaceholderWithSort("<Multiplicand:","Exp"),String("\" * \""),PlaceholderWithSort("<Multiplier:","Exp")],[]),CompletionTemplateEx([Sort("Exp")],CompletionPrefix(String("\"!Boolean\"")),[String("\"!\""),PlaceholderWithSort("<Boolean:","Exp")],[]),CompletionTemplateEx([Sort("Exp")],CompletionPrefix(String("\"(Expression)\"")),[String("\"(\""),PlaceholderWithSort("<Expression:","Exp"),String("\")\"")],[]),CompletionTemplateEx([Sort("Exp")],CompletionPrefix(String("\"sizeof (Datatype)\"")),[String("\"sizeof (\""),PlaceholderWithSort("<Datatype:","Exp"),String("\")\"")],[]),CompletionTemplateEx([Sort("Exp")],CompletionPrefix(String("\"FuncName()\"")),[PlaceholderWithSort("<FuncName:","ID"),String("\"(\""),PlaceholderWithSort("<:","Exp"),String("\")\"")],[]),CompletionTemplateEx([Sort("Exp")],CompletionPrefix(String("\"-Exp\"")),[String("\"-\""),PlaceholderWithSort("<Exp:","Exp")],[]),CompletionTemplateEx([Sort("Exp")],CompletionPrefix(String("\"+Exp\"")),[String("\"+\""),PlaceholderWithSort("<Exp:","Exp")],[])]),Folding("",[FoldRule(SortAndConstructor(Sort("TypeDec"),Constructor("StructDec")),None),FoldRule(SortAndConstructor(Sort("FunctionDec"),Constructor("FunctionDef")),None),FoldRule(SortAndConstructor(Sort("Statement"),Constructor("IfElse")),None),FoldRule(SortAndConstructor(Sort("Statement"),Constructor("While")),None),FoldRule(SortAndConstructor(Sort("Statement"),Constructor("CodeBlock")),None)]),Folding(" Default folding definitions",[FoldRule(SortAndConstructor(Sort("Program"),Constructor("File")),None),FoldRule(SortAndConstructor(Sort("TypeDec"),Constructor("StructDec")),None),FoldRule(SortAndConstructor(Sort("FunctionDec"),Constructor("FunctionDef")),None)]),References("",[ReferenceRule("_",Strategy("editor-resolve")),HoverRule("_",Strategy("editor-hover"))]),Language(" Syntax properties (static defaults)",[LineCommentPrefix(String("\"//\"")),BlockCommentDefs(BlockCommentDef(String("\"/*\""),"*",String("\"*/\""))),FenceDefs([FenceDef("[","]"),FenceDef("(",")"),FenceDef("{","}")]),IndentDefs([IndentDef(String("\"=\"")),IndentDef(String("\":\""))]),IdentifierLexical(String("\"[A-Za-z0-9_]+\""))])])