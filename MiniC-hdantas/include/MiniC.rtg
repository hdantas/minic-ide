
regular tree grammar
  start Program
  productions
    ListStarOfExp1         -> ListPlusOfExp1
    ListStarOfExp1         -> <nil>()
    ListStarOfExp1         -> <conc>(ListStarOfExp1,ListStarOfExp1)
    ListPlusOfExp1         -> <conc>(ListStarOfExp1,ListPlusOfExp1)
    ListPlusOfExp1         -> <conc>(ListPlusOfExp1,ListStarOfExp1)
    ListPlusOfExp1         -> <conc>(ListPlusOfExp1,ListPlusOfExp1)
    ListPlusOfExp1         -> <cons>(Exp,ListStarOfExp1)
    ListStarOfStatement1   -> ListPlusOfStatement1
    ListStarOfStatement1   -> <nil>()
    ListStarOfStatement1   -> <conc>(ListStarOfStatement1,ListStarOfStatement1)
    ListPlusOfStatement1   -> <conc>(ListStarOfStatement1,ListPlusOfStatement1)
    ListPlusOfStatement1   -> <conc>(ListPlusOfStatement1,ListStarOfStatement1)
    ListPlusOfStatement1   -> <conc>(ListPlusOfStatement1,ListPlusOfStatement1)
    ListPlusOfStatement1   -> <cons>(Statement,ListStarOfStatement1)
    ListStarOfVarDec1      -> ListPlusOfVarDec1
    ListStarOfVarDec1      -> <nil>()
    ListStarOfVarDec1      -> <conc>(ListStarOfVarDec1,ListStarOfVarDec1)
    ListPlusOfVarDec1      -> <conc>(ListStarOfVarDec1,ListPlusOfVarDec1)
    ListPlusOfVarDec1      -> <conc>(ListPlusOfVarDec1,ListStarOfVarDec1)
    ListPlusOfVarDec1      -> <conc>(ListPlusOfVarDec1,ListPlusOfVarDec1)
    ListPlusOfVarDec1      -> <cons>(VarDec,ListStarOfVarDec1)
    ListStarOfParameter1   -> ListPlusOfParameter1
    ListStarOfParameter1   -> <nil>()
    ListStarOfParameter1   -> <conc>(ListStarOfParameter1,ListStarOfParameter1)
    ListPlusOfParameter1   -> <conc>(ListStarOfParameter1,ListPlusOfParameter1)
    ListPlusOfParameter1   -> <conc>(ListPlusOfParameter1,ListStarOfParameter1)
    ListPlusOfParameter1   -> <conc>(ListPlusOfParameter1,ListPlusOfParameter1)
    ListPlusOfParameter1   -> <cons>(Parameter,ListStarOfParameter1)
    ListStarOfFunctionDec1 -> ListPlusOfFunctionDec1
    ListStarOfFunctionDec1 -> <nil>()
    ListStarOfFunctionDec1 -> <conc>(ListStarOfFunctionDec1,ListStarOfFunctionDec1)
    ListPlusOfFunctionDec1 -> <conc>(ListStarOfFunctionDec1,ListPlusOfFunctionDec1)
    ListPlusOfFunctionDec1 -> <conc>(ListPlusOfFunctionDec1,ListStarOfFunctionDec1)
    ListPlusOfFunctionDec1 -> <conc>(ListPlusOfFunctionDec1,ListPlusOfFunctionDec1)
    ListPlusOfFunctionDec1 -> <cons>(FunctionDec,ListStarOfFunctionDec1)
    ListStarOfTypeDec1     -> ListPlusOfTypeDec1
    ListStarOfTypeDec1     -> <nil>()
    ListStarOfTypeDec1     -> <conc>(ListStarOfTypeDec1,ListStarOfTypeDec1)
    ListPlusOfTypeDec1     -> <conc>(ListStarOfTypeDec1,ListPlusOfTypeDec1)
    ListPlusOfTypeDec1     -> <conc>(ListPlusOfTypeDec1,ListStarOfTypeDec1)
    ListPlusOfTypeDec1     -> <conc>(ListPlusOfTypeDec1,ListPlusOfTypeDec1)
    ListPlusOfTypeDec1     -> <cons>(TypeDec,ListStarOfTypeDec1)
    ListStarOfCommentPart1 -> <string>
    ListPlusOfCommentPart1 -> <string>
    Exp                    -> COMPLETION-Exp(CONTENTCOMPLETE)
    Lvalue                 -> COMPLETION-Lvalue(CONTENTCOMPLETE)
    Statement              -> COMPLETION-Statement(CONTENTCOMPLETE)
    Type                   -> COMPLETION-Type(CONTENTCOMPLETE)
    ArrayType              -> COMPLETION-ArrayType(CONTENTCOMPLETE)
    Parameter              -> COMPLETION-Parameter(CONTENTCOMPLETE)
    FunctionDec            -> COMPLETION-FunctionDec(CONTENTCOMPLETE)
    VarDec                 -> COMPLETION-VarDec(CONTENTCOMPLETE)
    TypeDec                -> COMPLETION-TypeDec(CONTENTCOMPLETE)
    Program                -> COMPLETION-Program(CONTENTCOMPLETE)
    Exp                    -> Uplus(Exp)
    Exp                    -> Uminus(Exp)
    Exp                    -> Call(ID,ListStarOfExp1)
    Exp                    -> Sizeof(Exp)
    Exp                    -> Not(Exp)
    Exp                    -> Multiply(Exp,Exp)
    Exp                    -> Subtract(Exp,Exp)
    Exp                    -> Add(Exp,Exp)
    Exp                    -> Lt(Exp,Exp)
    Exp                    -> And(Exp,Exp)
    Exp                    -> Lvalue
    Lvalue                 -> ArrayVar(ID,Exp)
    Lvalue                 -> StructMember(Lvalue,Lvalue)
    Lvalue                 -> Var(ID)
    Exp                    -> FloatConst(FLOAT)
    Exp                    -> IntConst(INT)
    Statement              -> CodeBlock(ListStarOfStatement1)
    Statement              -> PrinfFloat(Exp)
    Statement              -> PrintfInt(Exp)
    Statement              -> While(Exp,Statement)
    Statement              -> IfElse(Exp,Statement,Statement)
    Statement              -> StructMemberAssignment(ID,ID,Exp)
    Statement              -> ArrayAssignment(ID,Exp,Exp)
    Statement              -> Assignment(ID,Exp)
    Type                   -> Struct(ID)
    Type                   -> Float()
    Type                   -> Int()
    ArrayType              -> ArrayFloat()
    ArrayType              -> ArrayInt()
    Parameter              -> ArrayArg(ArrayType,ID)
    Parameter              -> Arg(Type,ID)
    FunctionDec            -> FunctionDef(Type,ID,ListStarOfParameter1,ListStarOfVarDec1,ListStarOfStatement1,Exp)
    VarDec                 -> ArrayDec(ArrayType,ID,INT)
    VarDec                 -> VarDec(Type,ID)
    TypeDec                -> StructDec(ID,ListStarOfVarDec1)
    Program                -> File(ListStarOfTypeDec1,ListStarOfVarDec1,ListStarOfFunctionDec1,Exp)
    EOF                    -> <string>
    ForwardSlash           -> <string>
    Asterisk               -> <string>
    CommentPart            -> <string>
    BlockComment           -> <string>
    Comment                -> <string>
    FLOAT                  -> <string>
    INT                    -> <string>
    ID                     -> <string>
