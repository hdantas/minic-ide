module MiniC

signature
  constructors
    ArrayVar               : ID * Exp -> Lvalue
    StructMember           : Lvalue * Lvalue -> Lvalue
    Var                    : ID -> Lvalue
    Uplus                  : Exp -> Exp
    Uminus                 : Exp -> Exp
    Call                   : ID * List(Exp) -> Exp
    Sizeof                 : Exp -> Exp
    Not                    : Exp -> Exp
    Multiply               : Exp * Exp -> Exp
    Subtract               : Exp * Exp -> Exp
    Add                    : Exp * Exp -> Exp
    Lt                     : Exp * Exp -> Exp
    And                    : Exp * Exp -> Exp
                           : Lvalue -> Exp
    FloatConst             : FLOAT -> Exp
    IntConst               : INT -> Exp
    CodeBlock              : List(Statement) -> Statement
    PrinfFloat             : Exp -> Statement
    PrintfInt              : Exp -> Statement
    While                  : Exp * Statement -> Statement
    IfElse                 : Exp * Statement * Statement -> Statement
    StructMemberAssignment : ID * ID * Exp -> Statement
    ArrayAssignment        : ID * Exp * Exp -> Statement
    Assignment             : ID * Exp -> Statement
    Struct                 : ID -> Type
    Array                  : ArrayType -> Type
    Float                  : ArrayType
    Int                    : ArrayType
    ArrayArg               : ArrayType * ID -> Parameter
    Arg                    : Type * ID -> Parameter
    FunctionDef            : Type * ID * List(Parameter) * List(VarDec) * List(Statement) * Exp -> FunctionDec
    ArrayDec               : ArrayType * ID * INT -> VarDec
    VarDec                 : Type * ID -> VarDec
    StructDec              : ID * List(VarDec) -> TypeDec
    File                   : List(TypeDec) * List(VarDec) * List(FunctionDec) * Exp -> Program
                           : String -> FLOAT
                           : String -> INT
                           : String -> ID


signature
  constructors
    Some : a -> Option(a)
    None : Option(a)


signature
  constructors
    Cons : a * List(a) -> List(a)
    Nil  : List(a)
    Conc : List(a) * List(a) -> List(a)
