module MiniC-ContextFree.pp.generated

strategies
  prettyprint-Program :
    File(a, b, c, d) -> [ H(
                            [SOpt(HS(), "0")]
                          , [a35]
                          )
                        , H(
                            [SOpt(HS(), "0")]
                          , [b20]
                          )
                        , H(
                            [SOpt(HS(), "0")]
                          , [c6]
                          )
                        , H(
                            [SOpt(HS(), "0")]
                          , [d2]
                          )
                        ]
    where a35 := <pp-V-list(prettyprint-TypeDec)> a
    where b20 := <pp-V-list(prettyprint-VarDec)> b
    where c6 := <pp-V-list(prettyprint-FunctionDec)> c
    where d2 := <pp-one-Z(prettyprint-Exp)> d

  prettyprint-TypeDec :
    StructDec(a, b) -> [ H(
                           [SOpt(HS(), "0")]
                         , [S("struct "), a36]
                         )
                       , a37
                       , b21
                       , a38
                       ]
    where a36 := <pp-one-Z(prettyprint-ID)> a
    where a37 := <pp-indent(|"2")> [S("{")]
    where b21 := <pp-indent(|"2")> [<pp-V-list(prettyprint-VarDec)> b]
    where a38 := <pp-indent(|"2")> [S("};")]

  prettyprint-VarDec :
    VarDec(a, b) -> [ H(
                        [SOpt(HS(), "0")]
                      , [ a39
                        , S(" ")
                        , b22
                        , S(";")
                        ]
                      )
                    ]
    where a39 := <pp-one-Z(prettyprint-Type)> a
    where b22 := <pp-one-Z(prettyprint-ID)> b

  prettyprint-VarDec :
    ArrayDec(a, b, c) -> [ H(
                             [SOpt(HS(), "0")]
                           , [ a40
                             , S(" ")
                             , b23
                             , S("[")
                             , c7
                             , S("];")
                             ]
                           )
                         ]
    where a40 := <pp-one-Z(prettyprint-ArrayType)> a
    where b23 := <pp-one-Z(prettyprint-ID)> b
    where c7 := <pp-one-Z(prettyprint-INT)> c

  prettyprint-FunctionDec :
    FunctionDef(a, b, c, d, e, f) -> [ H(
                                         [SOpt(HS(), "0")]
                                       , [ a41
                                         , S(" ")
                                         , b24
                                         , S(" (")
                                         , c8
                                         , S(")")
                                         ]
                                       )
                                     , a42
                                     , d3
                                     , e3
                                     , f1
                                     , a43
                                     ]
    where a41 := <pp-one-Z(prettyprint-Type)> a
    where b24 := <pp-one-Z(prettyprint-ID)> b
    where c8 := <pp-H-list(prettyprint-Parameter|", ")> c
    where a42 := <pp-indent(|"2")> [S("{")]
    where d3 := <pp-indent(|"2")> [<pp-V-list(prettyprint-VarDec)> d]
    where e3 := <pp-indent(|"2")> [<pp-V-list(prettyprint-Statement)> e]
    where f1 := <pp-indent(|"2")> [ S("return ")
                                  , <pp-one-Z(prettyprint-Exp)> f
                                  , S(";")
                                  ]
    where a43 := <pp-indent(|"2")> [S("}")]

  prettyprint-Parameter :
    Arg(a, b) -> [ H(
                     [SOpt(HS(), "0")]
                   , [a44, S(" "), b25]
                   )
                 ]
    where a44 := <pp-one-Z(prettyprint-Type)> a
    where b25 := <pp-one-Z(prettyprint-ID)> b

  prettyprint-Parameter :
    ArrayArg(a, b) -> [ H(
                          [SOpt(HS(), "0")]
                        , [ a45
                          , S(" ")
                          , b26
                          , S("[]")
                          ]
                        )
                      ]
    where a45 := <pp-one-Z(prettyprint-ArrayType)> a
    where b26 := <pp-one-Z(prettyprint-ID)> b

  prettyprint-ArrayType :
    Int() -> [ H(
                 [SOpt(HS(), "0")]
               , [S("int")]
               )
             ]

  prettyprint-ArrayType :
    Float() -> [ H(
                   [SOpt(HS(), "0")]
                 , [S("float")]
                 )
               ]

  prettyprint-Type :
    Array(a) -> [ H(
                    [SOpt(HS(), "0")]
                  , [a46]
                  )
                ]
    where a46 := <pp-one-Z(prettyprint-ArrayType)> a

  prettyprint-Type :
    Struct(a) -> [ H(
                     [SOpt(HS(), "0")]
                   , [S("struct "), a47]
                   )
                 ]
    where a47 := <pp-one-Z(prettyprint-ID)> a

  prettyprint-Statement :
    Assignment(a, b) -> [ H(
                            [SOpt(HS(), "0")]
                          , [ a48
                            , S(" = ")
                            , b27
                            , S(";")
                            ]
                          )
                        ]
    where a48 := <pp-one-Z(prettyprint-ID)> a
    where b27 := <pp-one-Z(prettyprint-Exp)> b

  prettyprint-Statement :
    ArrayAssignment(a, b, c) -> [ H(
                                    [SOpt(HS(), "0")]
                                  , [ a49
                                    , S("[")
                                    , b28
                                    , S("] = ")
                                    , c9
                                    , S(";")
                                    ]
                                  )
                                ]
    where a49 := <pp-one-Z(prettyprint-ID)> a
    where b28 := <pp-one-Z(prettyprint-Exp)> b
    where c9 := <pp-one-Z(prettyprint-Exp)> c

  prettyprint-Statement :
    StructMemberAssignment(a, b, c) -> [ H(
                                           [SOpt(HS(), "0")]
                                         , [ a50
                                           , S(".")
                                           , b29
                                           , S(" = ")
                                           , c10
                                           , S(";")
                                           ]
                                         )
                                       ]
    where a50 := <pp-one-Z(prettyprint-ID)> a
    where b29 := <pp-one-Z(prettyprint-ID)> b
    where c10 := <pp-one-Z(prettyprint-Exp)> c

  prettyprint-Statement :
    IfElse(a, b, c) -> [ H(
                           [SOpt(HS(), "0")]
                         , [S("if ("), a51, S(")")]
                         )
                       , b30
                       , H(
                           [SOpt(HS(), "0")]
                         , [S("else")]
                         )
                       , c11
                       , H(
                           []
                         , [S("")]
                         )
                       ]
    where a51 := <pp-one-Z(prettyprint-Exp)> a
    where b30 := <pp-indent(|"2")> [<pp-one-Z(prettyprint-Statement)> b]
    where c11 := <pp-indent(|"2")> [<pp-one-Z(prettyprint-Statement)> c]

  prettyprint-Statement :
    While(a, b) -> [ H(
                       [SOpt(HS(), "0")]
                     , [S("while ("), a52, S(")")]
                     )
                   , b31
                   , H(
                       []
                     , [S("")]
                     )
                   ]
    where a52 := <pp-one-Z(prettyprint-Exp)> a
    where b31 := <pp-indent(|"2")> [<pp-one-Z(prettyprint-Statement)> b]

  prettyprint-Statement :
    PrintfInt(a) -> [ H(
                        [SOpt(HS(), "0")]
                      , [S("printf(\"%i\", "), a53, S(");")]
                      )
                    ]
    where a53 := <pp-one-Z(prettyprint-Exp)> a

  prettyprint-Statement :
    PrinfFloat(a) -> [ H(
                         [SOpt(HS(), "0")]
                       , [S("printf(\"%f\", "), a54, S(");")]
                       )
                     ]
    where a54 := <pp-one-Z(prettyprint-Exp)> a

  prettyprint-Statement :
    CodeBlock(a) -> [ H(
                        [SOpt(HS(), "0")]
                      , [S("{")]
                      )
                    , H(
                        [SOpt(HS(), "0")]
                      , [a55]
                      )
                    , H(
                        [SOpt(HS(), "0")]
                      , [S("}")]
                      )
                    ]
    where a55 := <pp-V-list(prettyprint-Statement)> a

  prettyprint-Exp :
    IntConst(a) -> [ H(
                       [SOpt(HS(), "0")]
                     , [a56]
                     )
                   ]
    where a56 := <pp-one-Z(prettyprint-INT)> a

  prettyprint-Exp :
    FloatConst(a) -> [ H(
                         [SOpt(HS(), "0")]
                       , [a57]
                       )
                     ]
    where a57 := <pp-one-Z(prettyprint-FLOAT)> a

  prettyprint-Lvalue :
    Var(a) -> [ H(
                  [SOpt(HS(), "0")]
                , [a58]
                )
              ]
    where a58 := <pp-one-Z(prettyprint-ID)> a

  prettyprint-Lvalue :
    StructMember(a, b) -> [ H(
                              [SOpt(HS(), "0")]
                            , [a59, S("."), b32]
                            )
                          ]
    where a59 := <pp-one-Z(prettyprint-Lvalue)> a
    where b32 := <pp-one-Z(prettyprint-Lvalue)> b

  prettyprint-Lvalue :
    ArrayVar(a, b) -> [ H(
                          [SOpt(HS(), "0")]
                        , [ a60
                          , S("[")
                          , b33
                          , S("]")
                          ]
                        )
                      ]
    where a60 := <pp-one-Z(prettyprint-ID)> a
    where b33 := <pp-one-Z(prettyprint-Exp)> b

  prettyprint-Exp :
    a -> [ H(
             [SOpt(HS(), "0")]
           , [a61]
           )
         ]
    where a61 := <pp-one-Z(prettyprint-Lvalue)> a

  prettyprint-Exp :
    And(a, b) -> [ H(
                     [SOpt(HS(), "0")]
                   , [a62, S(" && "), b34]
                   )
                 ]
    where a62 := <pp-one-Z(prettyprint-Exp)> a
    where b34 := <pp-one-Z(prettyprint-Exp)> b

  prettyprint-Exp :
    Lt(a, b) -> [ H(
                    [SOpt(HS(), "0")]
                  , [a63, S(" < "), b35]
                  )
                ]
    where a63 := <pp-one-Z(prettyprint-Exp)> a
    where b35 := <pp-one-Z(prettyprint-Exp)> b

  prettyprint-Exp :
    Add(a, b) -> [ H(
                     [SOpt(HS(), "0")]
                   , [a64, S(" + "), b36]
                   )
                 ]
    where a64 := <pp-one-Z(prettyprint-Exp)> a
    where b36 := <pp-one-Z(prettyprint-Exp)> b

  prettyprint-Exp :
    Subtract(a, b) -> [ H(
                          [SOpt(HS(), "0")]
                        , [a65, S(" - "), b37]
                        )
                      ]
    where a65 := <pp-one-Z(prettyprint-Exp)> a
    where b37 := <pp-one-Z(prettyprint-Exp)> b

  prettyprint-Exp :
    Multiply(a, b) -> [ H(
                          [SOpt(HS(), "0")]
                        , [a66, S(" * "), b38]
                        )
                      ]
    where a66 := <pp-one-Z(prettyprint-Exp)> a
    where b38 := <pp-one-Z(prettyprint-Exp)> b

  prettyprint-Exp :
    Not(a) -> [ H(
                  [SOpt(HS(), "0")]
                , [S("!"), a67]
                )
              ]
    where a67 := <pp-one-Z(prettyprint-Exp)> a

  prettyprint-Exp :
    Parenthetical(a) -> [ H(
                            [SOpt(HS(), "0")]
                          , [S("("), a68, S(")")]
                          )
                        ]
    where a68 := <pp-one-Z(prettyprint-Exp)> a

  prettyprint-Exp :
    Sizeof(a) -> [ H(
                     [SOpt(HS(), "0")]
                   , [S("sizeof ("), a69, S(")")]
                   )
                 ]
    where a69 := <pp-one-Z(prettyprint-Exp)> a

  prettyprint-Exp :
    Call(a, b) -> [ H(
                      [SOpt(HS(), "0")]
                    , [ a70
                      , S("(")
                      , b39
                      , S(")")
                      ]
                    )
                  ]
    where a70 := <pp-one-Z(prettyprint-ID)> a
    where b39 := <pp-H-list(prettyprint-Exp|", ")> b

  prettyprint-example =
    prettyprint-Program

  prettyprint-example =
    prettyprint-TypeDec

  prettyprint-example =
    prettyprint-VarDec

  prettyprint-example =
    prettyprint-FunctionDec

  prettyprint-example =
    prettyprint-Parameter

  prettyprint-example =
    prettyprint-ArrayType

  prettyprint-example =
    prettyprint-Type

  prettyprint-example =
    prettyprint-Statement

  prettyprint-example =
    prettyprint-Lvalue

  prettyprint-example =
    prettyprint-Exp