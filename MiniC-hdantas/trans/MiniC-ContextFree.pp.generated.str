module MiniC-ContextFree.pp.generated

strategies
  prettyprint-Program :
    File(a, b, c, d) -> [ H(
                            [SOpt(HS(), "0")]
                          , [a78]
                          )
                        , H(
                            [SOpt(HS(), "0")]
                          , [b40]
                          )
                        , H(
                            [SOpt(HS(), "0")]
                          , [c10]
                          )
                        , H(
                            [SOpt(HS(), "0")]
                          , [d4]
                          )
                        ]
    where a78 := <pp-V-list(prettyprint-TypeDec)> a
    where b40 := <pp-V-list(prettyprint-VarDec)> b
    where c10 := <pp-V-list(prettyprint-FunctionDec)> c
    where d4 := <pp-one-Z(prettyprint-Exp)> d

  prettyprint-TypeDec :
    StructDec(a, b) -> [ H(
                           [SOpt(HS(), "0")]
                         , [S("struct "), a79]
                         )
                       , a80
                       , b41
                       , a81
                       ]
    where a79 := <pp-one-Z(prettyprint-ID)> a
    where a80 := <pp-indent(|"2")> [S("{")]
    where b41 := <pp-indent(|"2")> [<pp-V-list(prettyprint-FieldDec)> b]
    where a81 := <pp-indent(|"2")> [S("};")]

  prettyprint-FieldDec :
    FieldDec(a, b) -> [ H(
                          [SOpt(HS(), "0")]
                        , [ a82
                          , S(" ")
                          , b42
                          , S(";")
                          ]
                        )
                      ]
    where a82 := <pp-one-Z(prettyprint-Type)> a
    where b42 := <pp-one-Z(prettyprint-ID)> b

  prettyprint-FieldDec :
    FieldArrayDec(a, b, c) -> [ H(
                                  [SOpt(HS(), "0")]
                                , [ a83
                                  , S(" ")
                                  , b43
                                  , S("[")
                                  , c11
                                  , S("];")
                                  ]
                                )
                              ]
    where a83 := <pp-one-Z(prettyprint-ArrayType)> a
    where b43 := <pp-one-Z(prettyprint-ID)> b
    where c11 := <pp-one-Z(prettyprint-INT)> c

  prettyprint-VarDec :
    VarDec(a, b) -> [ H(
                        [SOpt(HS(), "0")]
                      , [ a84
                        , S(" ")
                        , b44
                        , S(";")
                        ]
                      )
                    ]
    where a84 := <pp-one-Z(prettyprint-Type)> a
    where b44 := <pp-one-Z(prettyprint-ID)> b

  prettyprint-VarDec :
    ArrayDec(a, b, c) -> [ H(
                             [SOpt(HS(), "0")]
                           , [ a85
                             , S(" ")
                             , b45
                             , S("[")
                             , c12
                             , S("];")
                             ]
                           )
                         ]
    where a85 := <pp-one-Z(prettyprint-ArrayType)> a
    where b45 := <pp-one-Z(prettyprint-ID)> b
    where c12 := <pp-one-Z(prettyprint-INT)> c

  prettyprint-FunctionDec :
    FunctionDef(a, b, c, d, e) -> [ H(
                                      [SOpt(HS(), "0")]
                                    , [ a86
                                      , S(" ")
                                      , b46
                                      , S(" (")
                                      , c13
                                      , S(")")
                                      ]
                                    )
                                  , a87
                                  , d5
                                  , e4
                                  , a88
                                  ]
    where a86 := <pp-one-Z(prettyprint-Type)> a
    where b46 := <pp-one-Z(prettyprint-ID)> b
    where c13 := <pp-H-list(prettyprint-Parameter|", ")> c
    where a87 := <pp-indent(|"2")> [S("{")]
    where d5 := <pp-indent(|"2")> [<pp-V-list(prettyprint-Statement)> d]
    where e4 := <pp-indent(|"2")> [ S("return ")
                                  , <pp-one-Z(prettyprint-Exp)> e
                                  , S(";")
                                  ]
    where a88 := <pp-indent(|"2")> [S("}")]

  prettyprint-Parameter :
    Arg(a, b) -> [ H(
                     [SOpt(HS(), "0")]
                   , [a89, S(" "), b47]
                   )
                 ]
    where a89 := <pp-one-Z(prettyprint-Type)> a
    where b47 := <pp-one-Z(prettyprint-ID)> b

  prettyprint-Parameter :
    ArrayArg(a, b) -> [ H(
                          [SOpt(HS(), "0")]
                        , [ a90
                          , S(" ")
                          , b48
                          , S("[]")
                          ]
                        )
                      ]
    where a90 := <pp-one-Z(prettyprint-ArrayType)> a
    where b48 := <pp-one-Z(prettyprint-ID)> b

  prettyprint-ArrayType :
    ArrayInt() -> [ H(
                      [SOpt(HS(), "0")]
                    , [S("int")]
                    )
                  ]

  prettyprint-ArrayType :
    ArrayFloat() -> [ H(
                        [SOpt(HS(), "0")]
                      , [S("float")]
                      )
                    ]

  prettyprint-Type :
    Int() -> [ H(
                 [SOpt(HS(), "0")]
               , [S("int")]
               )
             ]

  prettyprint-Type :
    Float() -> [ H(
                   [SOpt(HS(), "0")]
                 , [S("float")]
                 )
               ]

  prettyprint-Type :
    Struct(a) -> [ H(
                     [SOpt(HS(), "0")]
                   , [S("struct "), a91]
                   )
                 ]
    where a91 := <pp-one-Z(prettyprint-ID)> a

  prettyprint-Statement :
    a -> [ H(
             [SOpt(HS(), "0")]
           , [a92]
           )
         ]
    where a92 := <pp-one-Z(prettyprint-VarDec)> a

  prettyprint-Statement :
    Assignment(a, b) -> [ H(
                            [SOpt(HS(), "0")]
                          , [ a93
                            , S(" = ")
                            , b49
                            , S(";")
                            ]
                          )
                        ]
    where a93 := <pp-one-Z(prettyprint-Lvalue)> a
    where b49 := <pp-one-Z(prettyprint-Exp)> b

  prettyprint-Statement :
    IfElse(a, b, c) -> [ H(
                           [SOpt(HS(), "0")]
                         , [S("if ("), a94, S(")")]
                         )
                       , b50
                       , H(
                           [SOpt(HS(), "0")]
                         , [S("else")]
                         )
                       , c14
                       , H(
                           []
                         , [S("")]
                         )
                       ]
    where a94 := <pp-one-Z(prettyprint-Exp)> a
    where b50 := <pp-indent(|"2")> [<pp-one-Z(prettyprint-Statement)> b]
    where c14 := <pp-indent(|"2")> [<pp-one-Z(prettyprint-Statement)> c]

  prettyprint-Statement :
    While(a, b) -> [ H(
                       [SOpt(HS(), "0")]
                     , [S("while ("), a95, S(")")]
                     )
                   , b51
                   , H(
                       []
                     , [S("")]
                     )
                   ]
    where a95 := <pp-one-Z(prettyprint-Exp)> a
    where b51 := <pp-indent(|"2")> [<pp-one-Z(prettyprint-Statement)> b]

  prettyprint-Statement :
    PrintfInt(a) -> [ H(
                        [SOpt(HS(), "0")]
                      , [S("printf(\"%i\", "), a96, S(");")]
                      )
                    ]
    where a96 := <pp-one-Z(prettyprint-Exp)> a

  prettyprint-Statement :
    PrintfFloat(a) -> [ H(
                          [SOpt(HS(), "0")]
                        , [S("printf(\"%f\", "), a97, S(");")]
                        )
                      ]
    where a97 := <pp-one-Z(prettyprint-Exp)> a

  prettyprint-Statement :
    CodeBlock(a) -> [ H(
                        [SOpt(HS(), "0")]
                      , [S("{")]
                      )
                    , H(
                        [SOpt(HS(), "0")]
                      , [a98]
                      )
                    , H(
                        [SOpt(HS(), "0")]
                      , [S("}")]
                      )
                    ]
    where a98 := <pp-V-list(prettyprint-Statement)> a

  prettyprint-Exp :
    OctalConst(a) -> [ H(
                         [SOpt(HS(), "0")]
                       , [a99]
                       )
                     ]
    where a99 := <pp-one-Z(prettyprint-OCTAL)> a

  prettyprint-Exp :
    IntConst(a) -> [ H(
                       [SOpt(HS(), "0")]
                     , [a100]
                     )
                   ]
    where a100 := <pp-one-Z(prettyprint-INT)> a

  prettyprint-Exp :
    FloatConst(a) -> [ H(
                         [SOpt(HS(), "0")]
                       , [a101]
                       )
                     ]
    where a101 := <pp-one-Z(prettyprint-FLOAT)> a

  prettyprint-Lvalue :
    Var(a) -> [ H(
                  [SOpt(HS(), "0")]
                , [a102]
                )
              ]
    where a102 := <pp-one-Z(prettyprint-ID)> a

  prettyprint-Lvalue :
    StructMember(a, b) -> [ H(
                              [SOpt(HS(), "0")]
                            , [a103, S("."), b52]
                            )
                          ]
    where a103 := <pp-one-Z(prettyprint-Lvalue)> a
    where b52 := <pp-one-Z(prettyprint-Lvalue)> b

  prettyprint-Lvalue :
    ArrayVar(a, b) -> [ H(
                          [SOpt(HS(), "0")]
                        , [ a104
                          , S("[")
                          , b53
                          , S("]")
                          ]
                        )
                      ]
    where a104 := <pp-one-Z(prettyprint-Lvalue)> a
    where b53 := <pp-one-Z(prettyprint-Exp)> b

  prettyprint-Exp :
    a -> [ H(
             [SOpt(HS(), "0")]
           , [a105]
           )
         ]
    where a105 := <pp-one-Z(prettyprint-Lvalue)> a

  prettyprint-Exp :
    And(a, b) -> [ H(
                     [SOpt(HS(), "0")]
                   , [a106, S(" && "), b54]
                   )
                 ]
    where a106 := <pp-one-Z(prettyprint-Exp)> a
    where b54 := <pp-one-Z(prettyprint-Exp)> b

  prettyprint-Exp :
    Lt(a, b) -> [ H(
                    [SOpt(HS(), "0")]
                  , [a107, S(" < "), b55]
                  )
                ]
    where a107 := <pp-one-Z(prettyprint-Exp)> a
    where b55 := <pp-one-Z(prettyprint-Exp)> b

  prettyprint-Exp :
    Add(a, b) -> [ H(
                     [SOpt(HS(), "0")]
                   , [a108, S(" + "), b56]
                   )
                 ]
    where a108 := <pp-one-Z(prettyprint-Exp)> a
    where b56 := <pp-one-Z(prettyprint-Exp)> b

  prettyprint-Exp :
    Subtract(a, b) -> [ H(
                          [SOpt(HS(), "0")]
                        , [a109, S(" - "), b57]
                        )
                      ]
    where a109 := <pp-one-Z(prettyprint-Exp)> a
    where b57 := <pp-one-Z(prettyprint-Exp)> b

  prettyprint-Exp :
    Multiply(a, b) -> [ H(
                          [SOpt(HS(), "0")]
                        , [a110, S(" * "), b58]
                        )
                      ]
    where a110 := <pp-one-Z(prettyprint-Exp)> a
    where b58 := <pp-one-Z(prettyprint-Exp)> b

  prettyprint-Exp :
    Not(a) -> [ H(
                  [SOpt(HS(), "0")]
                , [S("!"), a111]
                )
              ]
    where a111 := <pp-one-Z(prettyprint-Exp)> a

  prettyprint-Exp :
    Parenthetical(a) -> [ H(
                            [SOpt(HS(), "0")]
                          , [S("("), a112, S(")")]
                          )
                        ]
    where a112 := <pp-one-Z(prettyprint-Exp)> a

  prettyprint-Exp :
    Sizeof(a) -> [ H(
                     [SOpt(HS(), "0")]
                   , [S("sizeof ("), a113, S(")")]
                   )
                 ]
    where a113 := <pp-one-Z(prettyprint-Exp)> a

  prettyprint-Exp :
    Call(a, b) -> [ H(
                      [SOpt(HS(), "0")]
                    , [ a114
                      , S("(")
                      , b59
                      , S(")")
                      ]
                    )
                  ]
    where a114 := <pp-one-Z(prettyprint-ID)> a
    where b59 := <pp-H-list(prettyprint-Exp|", ")> b

  prettyprint-Exp :
    Uminus(a) -> [ H(
                     [SOpt(HS(), "0")]
                   , [S("-"), a115]
                   )
                 ]
    where a115 := <pp-one-Z(prettyprint-Exp)> a

  prettyprint-Exp :
    Uplus(a) -> [ H(
                    [SOpt(HS(), "0")]
                  , [S("+"), a116]
                  )
                ]
    where a116 := <pp-one-Z(prettyprint-Exp)> a

  prettyprint-example =
    prettyprint-Program

  prettyprint-example =
    prettyprint-TypeDec

  prettyprint-example =
    prettyprint-FieldDec

  prettyprint-example =
    prettyprint-VarDec

  prettyprint-example =
    prettyprint-FunctionDec

  prettyprint-example =
    prettyprint-Parameter

  prettyprint-example =
    prettyprint-ArrayType

  prettyprint-example =
    prettyprint-Type

  prettyprint-example =
    prettyprint-Statement

  prettyprint-example =
    prettyprint-Lvalue

  prettyprint-example =
    prettyprint-Exp