module MiniC-ContextFree.pp.generated

strategies
  prettyprint-Program :
    File(a, b, c, d) -> [ H(
                            [SOpt(HS(), "0")]
                          , [a0]
                          )
                        , H(
                            [SOpt(HS(), "0")]
                          , [b0]
                          )
                        , H(
                            [SOpt(HS(), "0")]
                          , [c0]
                          )
                        , H(
                            [SOpt(HS(), "0")]
                          , [d0]
                          )
                        ]
    where a0 := <pp-V-list(prettyprint-TypeDec)> a
    where b0 := <pp-V-list(prettyprint-VarDec)> b
    where c0 := <pp-V-list(prettyprint-FunctionDec)> c
    where d0 := <pp-one-Z(prettyprint-Exp)> d

  prettyprint-TypeDec :
    StructDec(a, b) -> [ H(
                           [SOpt(HS(), "0")]
                         , [S("struct "), a3]
                         )
                       , a4
                       , b1
                       , a5
                       ]
    where a3 := <pp-one-Z(prettyprint-ID)> a
    where a4 := <pp-indent(|"2")> [S("{")]
    where b1 := <pp-indent(|"2")> [<pp-V-list(prettyprint-VarDec)> b]
    where a5 := <pp-indent(|"2")> [S("};")]

  prettyprint-VarDec :
    VarDec(a, b) -> [ H(
                        [SOpt(HS(), "0")]
                      , [ a6
                        , S(" ")
                        , b2
                        , S(";")
                        ]
                      )
                    ]
    where a6 := <pp-one-Z(prettyprint-Type)> a
    where b2 := <pp-one-Z(prettyprint-ID)> b

  prettyprint-VarDec :
    ArrayDec(a, b, c) -> [ H(
                             [SOpt(HS(), "0")]
                           , [ a7
                             , S(" ")
                             , b3
                             , S("[")
                             , c1
                             , S("];")
                             ]
                           )
                         ]
    where a7 := <pp-one-Z(prettyprint-ArrayType)> a
    where b3 := <pp-one-Z(prettyprint-ID)> b
    where c1 := <pp-one-Z(prettyprint-INT)> c

  prettyprint-FunctionDec :
    FunctionDef(a, b, c, d, e) -> [ H(
                                      [SOpt(HS(), "0")]
                                    , [ a8
                                      , S(" ")
                                      , b4
                                      , S(" (")
                                      , c2
                                      , S(")")
                                      ]
                                    )
                                  , a9
                                  , d1
                                  , e0
                                  , a10
                                  ]
    where a8 := <pp-one-Z(prettyprint-Type)> a
    where b4 := <pp-one-Z(prettyprint-ID)> b
    where c2 := <pp-H-list(prettyprint-Parameter|", ")> c
    where a9 := <pp-indent(|"2")> [S("{")]
    where d1 := <pp-indent(|"2")> [<pp-V-list(prettyprint-Statement)> d]
    where e0 := <pp-indent(|"2")> [ S("return ")
                                  , <pp-one-Z(prettyprint-Exp)> e
                                  , S(";")
                                  ]
    where a10 := <pp-indent(|"2")> [S("}")]

  prettyprint-Parameter :
    Arg(a, b) -> [ H(
                     [SOpt(HS(), "0")]
                   , [a11, S(" "), b5]
                   )
                 ]
    where a11 := <pp-one-Z(prettyprint-Type)> a
    where b5 := <pp-one-Z(prettyprint-ID)> b

  prettyprint-Parameter :
    ArrayArg(a, b) -> [ H(
                          [SOpt(HS(), "0")]
                        , [ a12
                          , S(" ")
                          , b6
                          , S("[]")
                          ]
                        )
                      ]
    where a12 := <pp-one-Z(prettyprint-ArrayType)> a
    where b6 := <pp-one-Z(prettyprint-ID)> b

  prettyprint-ArrayType :
    ArrayInt() -> [ H(
                      [SOpt(HS(), "0")]
                    , [S("int")]
                    )
                  ]

  prettyprint-ArrayType :
    ArrayFloat() -> [ H(
                        [SOpt(HS(), "0")]
                      , [S("float")]
                      )
                    ]

  prettyprint-Type :
    Int() -> [ H(
                 [SOpt(HS(), "0")]
               , [S("int")]
               )
             ]

  prettyprint-Type :
    Float() -> [ H(
                   [SOpt(HS(), "0")]
                 , [S("float")]
                 )
               ]

  prettyprint-Type :
    Struct(a) -> [ H(
                     [SOpt(HS(), "0")]
                   , [S("struct "), a13]
                   )
                 ]
    where a13 := <pp-one-Z(prettyprint-ID)> a

  prettyprint-Statement :
    a -> [ H(
             [SOpt(HS(), "0")]
           , [a14]
           )
         ]
    where a14 := <pp-one-Z(prettyprint-VarDec)> a

  prettyprint-Statement :
    Assignment(a, b) -> [ H(
                            [SOpt(HS(), "0")]
                          , [ a15
                            , S(" = ")
                            , b7
                            , S(";")
                            ]
                          )
                        ]
    where a15 := <pp-one-Z(prettyprint-ID)> a
    where b7 := <pp-one-Z(prettyprint-Exp)> b

  prettyprint-Statement :
    ArrayAssignment(a, b, c) -> [ H(
                                    [SOpt(HS(), "0")]
                                  , [ a16
                                    , S("[")
                                    , b8
                                    , S("] = ")
                                    , c3
                                    , S(";")
                                    ]
                                  )
                                ]
    where a16 := <pp-one-Z(prettyprint-ID)> a
    where b8 := <pp-one-Z(prettyprint-Exp)> b
    where c3 := <pp-one-Z(prettyprint-Exp)> c

  prettyprint-Statement :
    StructMemberAssignment(a, b, c) -> [ H(
                                           [SOpt(HS(), "0")]
                                         , [ a17
                                           , S(".")
                                           , b9
                                           , S(" = ")
                                           , c4
                                           , S(";")
                                           ]
                                         )
                                       ]
    where a17 := <pp-one-Z(prettyprint-ID)> a
    where b9 := <pp-one-Z(prettyprint-ID)> b
    where c4 := <pp-one-Z(prettyprint-Exp)> c

  prettyprint-Statement :
    IfElse(a, b, c) -> [ H(
                           [SOpt(HS(), "0")]
                         , [S("if ("), a18, S(")")]
                         )
                       , b10
                       , H(
                           [SOpt(HS(), "0")]
                         , [S("else")]
                         )
                       , c5
                       , H(
                           []
                         , [S("")]
                         )
                       ]
    where a18 := <pp-one-Z(prettyprint-Exp)> a
    where b10 := <pp-indent(|"2")> [<pp-one-Z(prettyprint-Statement)> b]
    where c5 := <pp-indent(|"2")> [<pp-one-Z(prettyprint-Statement)> c]

  prettyprint-Statement :
    While(a, b) -> [ H(
                       [SOpt(HS(), "0")]
                     , [S("while ("), a19, S(")")]
                     )
                   , b11
                   , H(
                       []
                     , [S("")]
                     )
                   ]
    where a19 := <pp-one-Z(prettyprint-Exp)> a
    where b11 := <pp-indent(|"2")> [<pp-one-Z(prettyprint-Statement)> b]

  prettyprint-Statement :
    PrintfInt(a) -> [ H(
                        [SOpt(HS(), "0")]
                      , [S("printf(\"%i\", "), a20, S(");")]
                      )
                    ]
    where a20 := <pp-one-Z(prettyprint-Exp)> a

  prettyprint-Statement :
    PrinfFloat(a) -> [ H(
                         [SOpt(HS(), "0")]
                       , [S("printf(\"%f\", "), a21, S(");")]
                       )
                     ]
    where a21 := <pp-one-Z(prettyprint-Exp)> a

  prettyprint-Statement :
    CodeBlock(a) -> [ H(
                        [SOpt(HS(), "0")]
                      , [S("{")]
                      )
                    , H(
                        [SOpt(HS(), "0")]
                      , [a22]
                      )
                    , H(
                        [SOpt(HS(), "0")]
                      , [S("}")]
                      )
                    ]
    where a22 := <pp-V-list(prettyprint-Statement)> a

  prettyprint-Exp :
    OctalConst(a) -> [ H(
                         [SOpt(HS(), "0")]
                       , [a23]
                       )
                     ]
    where a23 := <pp-one-Z(prettyprint-OCTAL)> a

  prettyprint-Exp :
    IntConst(a) -> [ H(
                       [SOpt(HS(), "0")]
                     , [a24]
                     )
                   ]
    where a24 := <pp-one-Z(prettyprint-INT)> a

  prettyprint-Exp :
    FloatConst(a) -> [ H(
                         [SOpt(HS(), "0")]
                       , [a25]
                       )
                     ]
    where a25 := <pp-one-Z(prettyprint-FLOAT)> a

  prettyprint-Lvalue :
    Var(a) -> [ H(
                  [SOpt(HS(), "0")]
                , [a26]
                )
              ]
    where a26 := <pp-one-Z(prettyprint-ID)> a

  prettyprint-Lvalue :
    StructMember(a, b) -> [ H(
                              [SOpt(HS(), "0")]
                            , [a27, S("."), b12]
                            )
                          ]
    where a27 := <pp-one-Z(prettyprint-Lvalue)> a
    where b12 := <pp-one-Z(prettyprint-Lvalue)> b

  prettyprint-Lvalue :
    ArrayVar(a, b) -> [ H(
                          [SOpt(HS(), "0")]
                        , [ a28
                          , S("[")
                          , b13
                          , S("]")
                          ]
                        )
                      ]
    where a28 := <pp-one-Z(prettyprint-ID)> a
    where b13 := <pp-one-Z(prettyprint-Exp)> b

  prettyprint-Exp :
    a -> [ H(
             [SOpt(HS(), "0")]
           , [a29]
           )
         ]
    where a29 := <pp-one-Z(prettyprint-Lvalue)> a

  prettyprint-Exp :
    And(a, b) -> [ H(
                     [SOpt(HS(), "0")]
                   , [a30, S(" && "), b14]
                   )
                 ]
    where a30 := <pp-one-Z(prettyprint-Exp)> a
    where b14 := <pp-one-Z(prettyprint-Exp)> b

  prettyprint-Exp :
    Lt(a, b) -> [ H(
                    [SOpt(HS(), "0")]
                  , [a31, S(" < "), b15]
                  )
                ]
    where a31 := <pp-one-Z(prettyprint-Exp)> a
    where b15 := <pp-one-Z(prettyprint-Exp)> b

  prettyprint-Exp :
    Add(a, b) -> [ H(
                     [SOpt(HS(), "0")]
                   , [a32, S(" + "), b16]
                   )
                 ]
    where a32 := <pp-one-Z(prettyprint-Exp)> a
    where b16 := <pp-one-Z(prettyprint-Exp)> b

  prettyprint-Exp :
    Subtract(a, b) -> [ H(
                          [SOpt(HS(), "0")]
                        , [a33, S(" - "), b17]
                        )
                      ]
    where a33 := <pp-one-Z(prettyprint-Exp)> a
    where b17 := <pp-one-Z(prettyprint-Exp)> b

  prettyprint-Exp :
    Multiply(a, b) -> [ H(
                          [SOpt(HS(), "0")]
                        , [a34, S(" * "), b18]
                        )
                      ]
    where a34 := <pp-one-Z(prettyprint-Exp)> a
    where b18 := <pp-one-Z(prettyprint-Exp)> b

  prettyprint-Exp :
    Not(a) -> [ H(
                  [SOpt(HS(), "0")]
                , [S("!"), a35]
                )
              ]
    where a35 := <pp-one-Z(prettyprint-Exp)> a

  prettyprint-Exp :
    Parenthetical(a) -> [ H(
                            [SOpt(HS(), "0")]
                          , [S("("), a36, S(")")]
                          )
                        ]
    where a36 := <pp-one-Z(prettyprint-Exp)> a

  prettyprint-Exp :
    Sizeof(a) -> [ H(
                     [SOpt(HS(), "0")]
                   , [S("sizeof ("), a37, S(")")]
                   )
                 ]
    where a37 := <pp-one-Z(prettyprint-Exp)> a

  prettyprint-Exp :
    Call(a, b) -> [ H(
                      [SOpt(HS(), "0")]
                    , [ a38
                      , S("(")
                      , b19
                      , S(")")
                      ]
                    )
                  ]
    where a38 := <pp-one-Z(prettyprint-ID)> a
    where b19 := <pp-H-list(prettyprint-Exp|", ")> b

  prettyprint-Exp :
    Uminus(a) -> [ H(
                     [SOpt(HS(), "0")]
                   , [S("-"), a39]
                   )
                 ]
    where a39 := <pp-one-Z(prettyprint-Exp)> a

  prettyprint-Exp :
    Uplus(a) -> [ H(
                    [SOpt(HS(), "0")]
                  , [S("+"), a40]
                  )
                ]
    where a40 := <pp-one-Z(prettyprint-Exp)> a

  prettyprint-example =
    prettyprint-Program

  prettyprint-example =
    prettyprint-TypeDec

  prettyprint-example =
    prettyprint-VarDec

  prettyprint-example =
    prettyprint-FunctionDec

  prettyprint-example =
    prettyprint-Parameter

  prettyprint-example =
    prettyprint-ArrayType

  prettyprint-example =
    prettyprint-Type

  prettyprint-example =
    prettyprint-Statement

  prettyprint-example =
    prettyprint-Lvalue

  prettyprint-example =
    prettyprint-Exp