module trans/type-ts.generated

imports
  lib/runtime/nabl/-
  lib/runtime/task/-
  lib/runtime/types/-
  lib/runtime/properties/-
  
  
rules
  
  create-type-task(|ctx) :
    IntConst(v) -> <type-is(|ctx, [])> Int()
    where id
  
  create-type-task(|ctx) :
    FloatConst(f) -> <type-is(|ctx, [])> Float()
    where id
  
  create-type-task(|ctx) :
    UnExp(op, e1) -> <type-is(|ctx, [t16, expected-type, return-type, e1-type, eq32])> return-type
    where t16 := <type-task(|ctx)> op;
          expected-type := <new-task(|ctx)> Rewrite("proj24", t16);
          return-type := <new-task(|ctx)> Rewrite("proj25", t16);
          e1-type := <type-task(|ctx)> e1;
          eq32 := <type-match(|ctx, e1-type)> expected-type;
          <task-create-error-on-failure(|ctx, eq32, ["Unexpected subexpression type for unary operator. Received ", e1-type, " expecting ", expected-type, "."])> e1
  
  create-type-task(|ctx) :
    UMINUS() -> <type-is(|ctx, [])> (Int(), Int())
    where id
  
  create-type-task(|ctx) :
    UPLUS() -> <type-is(|ctx, [])> (Int(), Int())
    where id
  
  create-type-task(|ctx) :
    UNOT() -> <type-is(|ctx, [])> (Int(), Int())
    where id
  
  create-type-task(|ctx) :
    USIZEOF() -> <type-is(|ctx, [])> (Int(), Int())
    where id
  
  create-type-task(|ctx) :
    BinExp(op, e1, e2) -> <type-is(|ctx, [t17, expected-type, return-type, e1-type, e2-type, eq33, eq34])> return-type
    where t17 := <type-task(|ctx)> op;
          expected-type := <new-task(|ctx)> Rewrite("proj22", t17);
          return-type := <new-task(|ctx)> Rewrite("proj23", t17);
          e1-type := <type-task(|ctx)> e1;
          e2-type := <type-task(|ctx)> e2;
          eq33 := <type-match(|ctx, e1-type)> expected-type;
          <task-create-error-on-failure(|ctx, eq33, ["Unexpected 1st subexpression type for unary operator. Received ", e1-type, " expecting ", expected-type, "."])> e1;
          eq34 := <type-match(|ctx, e2-type)> expected-type;
          <task-create-error-on-failure(|ctx, eq34, ["Unexpected 2nd subexpression type for unary operator. Received ", e2-type, " expecting ", expected-type, "."])> e2
  
  create-type-task(|ctx) :
    Plus() -> <type-is(|ctx, [])> (Int(), Int())
    where id
  
  create-type-task(|ctx) :
    Minus() -> <type-is(|ctx, [])> (Int(), Int())
    where id
  
  create-type-task(|ctx) :
    Mul() -> <type-is(|ctx, [])> (Int(), Int())
    where id
  
  create-type-task(|ctx) :
    And() -> <type-is(|ctx, [])> (Int(), Int())
    where id
  
  create-type-task(|ctx) :
    Lt() -> <type-is(|ctx, [])> (Int(), Int())
    where id
  
  create-type-task(|ctx) :
    Var(i) -> <type-is(|ctx, [ty])> ty
    where ty := <type-lookup(|ctx)> i
  
  create-type-task(|ctx) :
    StructMember(v, Field(f)) -> <type-is(|ctx, [ty])> ty
    where ty := <type-lookup(|ctx)> f
  
  create-type-task(|ctx) :
    StructMember(v, ArrayField(f, e)) -> <type-is(|ctx, [ty])> ty
    where ty := <type-lookup(|ctx)> f
  
  create-type-task(|ctx) :
    Arg(t, p) -> <type-is(|ctx, [])> t
    where id
  
  create-type-task(|ctx) :
    ArrayArg(t, p) -> <type-is(|ctx, [])> t
    where id
  
  nabl-constraint(|ctx) :
    Assignment(v, e) -> <fail>
    where type-e := <type-task(|ctx)> e;
          type-v := <type-task(|ctx)> v;
          subtype8 := <create-subtype-task(|ctx)>("<:", type-v, type-e);
          <task-create-error-on-failure(|ctx, subtype8, ["Assigning expression of type ", type-e, " to variable of type ", type-v, "."])> e
  
  nabl-constraint(|ctx) :
    IfElse(e, a, b) -> <fail>
    where type := <type-task(|ctx)> e;
          eq35 := <type-match(|ctx, Int())> type;
          <task-create-error-on-failure(|ctx, eq35, ["If statement requires an Int. Received ", type, "."])> e
  
  nabl-constraint(|ctx) :
    While(e, b) -> <fail>
    where type := <type-task(|ctx)> e;
          eq36 := <type-match(|ctx, Int())> type;
          <task-create-error-on-failure(|ctx, eq36, ["While statement requires an Int. Received ", type, "."])> e
  
  nabl-constraint(|ctx) :
    PrintfInt(e) -> <fail>
    where type := <type-task(|ctx)> e;
          eq37 := <type-match(|ctx, Int())> type;
          <task-create-error-on-failure(|ctx, eq37, ["%i expects an Int. Received ", type, "."])> e
  
  nabl-constraint(|ctx) :
    PrintfFloat(e) -> <fail>
    where type := <type-task(|ctx)> e;
          eq38 := <type-match(|ctx, Float())> type;
          <task-create-error-on-failure(|ctx, eq38, ["%f expects a Float. Received ", type, "."])> e
  
  nabl-constraint(|ctx) :
    FunctionDef(t, a, b, c, r) -> <fail>
    where ret-type := <type-lookup(|ctx)> r;
          subtype9 := <create-subtype-task(|ctx)>("<:", t, ret-type);
          <task-create-error-on-failure(|ctx, subtype9, ["Unexpect type for returning expression: ", ret-type, ". Expecting ", t, "."])> r
  
  create-subtype-task(|ctx) :
    ("<:", ty1, ty2) -> eq39
    where eq39 := <type-match(|ctx, ty2)> ty1
  
  
rules // projections
  
  task-rewrite :
    ("proj25", (expected-type, return-type)) -> return-type
  
  task-rewrite :
    ("proj24", (expected-type, return-type)) -> expected-type
  
  task-rewrite :
    ("proj23", (expected-type, return-type)) -> return-type
  
  task-rewrite :
    ("proj22", (expected-type, return-type)) -> expected-type
  
