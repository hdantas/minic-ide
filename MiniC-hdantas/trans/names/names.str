module names/names

imports
  lib/runtime/nabl/-
  lib/runtime/task/-
  lib/runtime/properties/-
  lib/runtime/types/-
  lib/runtime/editor/-
  include/MiniC


signature
  constructors
    NablNsStruct   : Namespace
    NablNsVariable : Namespace
    NablNsFunction : Namespace


rules

  nabl-scoping-site =
    ?File(_, _, _, _)
    ; origin-track-forced(
        nabl-scope(
        | [NablNsStruct(), NablNsVariable(), NablNsFunction()]
        )
      |
      )

  nabl-get-scope =
    ?File(_, _, _, _)
    ; ![NablNsStruct(), NablNsVariable(), NablNsFunction()]


rules

  nabl-get-scope =
    ?StructDec(s, _)
    ; ![NablNsVariable()]

  nabl-get-name :
    StructDec(s, _) -> s

  nabl-def-site(child-uris__, sibl-uris__, implicits__|lang__, partition__, uniques__, uri__, states__) =
    ?StructDec(s, _)
    ; origin-track-forced(
        StructDec(
          nabl-def(
            ?c-uri1__
          , ?s-uri1__
          | lang__
          , partition__
          , uniques__
          , uri__
          , uri__
          , NablNsStruct()
          , Unique()
          , Current()
          , [NablNsVariable()]
          )
        , id
        )
        ; match(child-uris__|c-uri1__)
        ; match(sibl-uris__|s-uri1__)
        ; match(implicits__|[])
      |
      )

  nabl-prop-site(|lang__, partition__, uris__, states__, implicits__) =
    ?StructDec(s, _)
    ; origin-track-forced(
        StructDec(
          nabl-store-props(
          | partition__
          , [Prop(Type(), s, [])]
          )
        , id
        )
      |
      )

  nabl-get-name :
    Struct(s) -> s

  nabl-use-site(|lang__, partition__, uniques__, uris__, states__) =
    ?Struct(s)
    ; origin-track-forced(
        Struct(
          nabl-use(
          | lang__
          , partition__
          , uniques__
          , uris__
          , [ UseCandidate(
                NablNsStruct()
              , []
              , Current()
              , True()
              , []
              )
            ]
          )
        )
      |
      )


rules

  nabl-get-name :
    VarDec(t, v) -> v

  nabl-def-site(child-uris__, sibl-uris__, implicits__|lang__, partition__, uniques__, uri__, states__) =
    ?VarDec(t, v)
    ; origin-track-forced(
        VarDec(
          id
        , nabl-def(
            ?c-uri1__
          , ?s-uri1__
          | lang__
          , partition__
          , uniques__
          , uri__
          , uri__
          , NablNsVariable()
          , Unique()
          , Current()
          , []
          )
        )
        ; match(child-uris__|c-uri1__)
        ; match(sibl-uris__|s-uri1__)
        ; match(implicits__|[])
      |
      )

  nabl-prop-site(|lang__, partition__, uris__, states__, implicits__) =
    ?VarDec(t, v)
    ; origin-track-forced(
        VarDec(
          id
        , nabl-store-props(
          | partition__
          , [Prop(Type(), t, [])]
          )
        )
      |
      )

  nabl-get-name :
    ArrayDec(t, v, _) -> v

  nabl-def-site(child-uris__, sibl-uris__, implicits__|lang__, partition__, uniques__, uri__, states__) =
    ?ArrayDec(t, v, _)
    ; origin-track-forced(
        ArrayDec(
          id
        , nabl-def(
            ?c-uri1__
          , ?s-uri1__
          | lang__
          , partition__
          , uniques__
          , uri__
          , uri__
          , NablNsVariable()
          , Unique()
          , Current()
          , []
          )
        , id
        )
        ; match(child-uris__|c-uri1__)
        ; match(sibl-uris__|s-uri1__)
        ; match(implicits__|[])
      |
      )

  nabl-prop-site(|lang__, partition__, uris__, states__, implicits__) =
    ?ArrayDec(t, v, _)
    ; origin-track-forced(
        ArrayDec(
          id
        , nabl-store-props(
          | partition__
          , [Prop(Type(), t, [])]
          )
        , id
        )
      |
      )

  nabl-get-name :
    Arg(t, a) -> a

  nabl-def-site(child-uris__, sibl-uris__, implicits__|lang__, partition__, uniques__, uri__, states__) =
    ?Arg(t, a)
    ; origin-track-forced(
        Arg(
          id
        , nabl-def(
            ?c-uri1__
          , ?s-uri1__
          | lang__
          , partition__
          , uniques__
          , uri__
          , uri__
          , NablNsVariable()
          , Unique()
          , Current()
          , []
          )
        )
        ; match(child-uris__|c-uri1__)
        ; match(sibl-uris__|s-uri1__)
        ; match(implicits__|[])
      |
      )

  nabl-prop-site(|lang__, partition__, uris__, states__, implicits__) =
    ?Arg(t, a)
    ; origin-track-forced(
        Arg(
          id
        , nabl-store-props(
          | partition__
          , [Prop(Type(), t, [])]
          )
        )
      |
      )

  nabl-get-name :
    ArrayArg(t, a) -> a

  nabl-def-site(child-uris__, sibl-uris__, implicits__|lang__, partition__, uniques__, uri__, states__) =
    ?ArrayArg(t, a)
    ; origin-track-forced(
        ArrayArg(
          id
        , nabl-def(
            ?c-uri1__
          , ?s-uri1__
          | lang__
          , partition__
          , uniques__
          , uri__
          , uri__
          , NablNsVariable()
          , Unique()
          , Current()
          , []
          )
        )
        ; match(child-uris__|c-uri1__)
        ; match(sibl-uris__|s-uri1__)
        ; match(implicits__|[])
      |
      )

  nabl-prop-site(|lang__, partition__, uris__, states__, implicits__) =
    ?ArrayArg(t, a)
    ; origin-track-forced(
        ArrayArg(
          id
        , nabl-store-props(
          | partition__
          , [Prop(Type(), t, [])]
          )
        )
      |
      )

  nabl-scoping-site =
    ?CodeBlock(_)
    ; origin-track-forced(
        nabl-scope(|[NablNsVariable()])
      |
      )

  nabl-get-scope =
    ?CodeBlock(_) ; ![NablNsVariable()]

  nabl-get-name :
    Var(v) -> v

  nabl-use-site(|lang__, partition__, uniques__, uris__, states__) =
    ?Var(v)
    ; origin-track-forced(
        Var(
          nabl-use(
          | lang__
          , partition__
          , uniques__
          , uris__
          , [ UseCandidate(
                NablNsVariable()
              , []
              , Current()
              , True()
              , []
              )
            ]
          )
        )
      |
      )


rules

  nabl-get-scope =
    ?FunctionDef(t, f, _, _, _)
    ; ![NablNsVariable()]

  nabl-get-name :
    FunctionDef(t, f, _, _, _) -> f

  nabl-def-site(child-uris__, sibl-uris__, implicits__|lang__, partition__, uniques__, uri__, states__) =
    ?FunctionDef(t, f, _, _, _)
    ; origin-track-forced(
        FunctionDef(
          id
        , nabl-def(
            ?c-uri1__
          , ?s-uri1__
          | lang__
          , partition__
          , uniques__
          , uri__
          , uri__
          , NablNsFunction()
          , Unique()
          , Current()
          , [NablNsVariable()]
          )
        , id
        , id
        , id
        )
        ; match(child-uris__|c-uri1__)
        ; match(sibl-uris__|s-uri1__)
        ; match(implicits__|[])
      |
      )

  nabl-prop-site(|lang__, partition__, uris__, states__, implicits__) =
    ?FunctionDef(t, f, _, _, _)
    ; origin-track-forced(
        FunctionDef(
          id
        , nabl-store-props(
          | partition__
          , [Prop(Type(), t, [])]
          )
        , id
        , id
        , id
        )
      |
      )

  nabl-get-name :
    Call(c, _) -> c

  nabl-use-site(|lang__, partition__, uniques__, uris__, states__) =
    ?Call(c, _)
    ; origin-track-forced(
        Call(
          nabl-use(
          | lang__
          , partition__
          , uniques__
          , uris__
          , [ UseCandidate(
                NablNsFunction()
              , []
              , Current()
              , True()
              , []
              )
            ]
          )
        , id
        )
      |
      )

  nabl-scoping-site =
    ?CodeBlock(_)
    ; origin-track-forced(
        nabl-scope(|[NablNsVariable()])
      |
      )

  nabl-get-scope =
    ?CodeBlock(_) ; ![NablNsVariable()]

  nabl-scoping-site =
    ?StructDec(_, _)
    ; origin-track-forced(
        nabl-scope(|[NablNsVariable()])
      |
      )

  nabl-get-scope =
    ?StructDec(_, _)
    ; ![NablNsVariable()]

  nabl-scoping-site =
    ?FunctionDef(_, _, _, _, _)
    ; origin-track-forced(
        nabl-scope(|[NablNsVariable()])
      |
      )

  nabl-get-scope =
    ?FunctionDef(_, _, _, _, _)
    ; ![NablNsVariable()]