module type-str

imports
  include/MiniC
  lib/runtime/task/-
  lib/runtime/types/-
  analysis/desugar
  
rules //literals
  create-type-task(|ctx): IntConst(_)   -> <type-is(|ctx)> Int()
  create-type-task(|ctx): FloatConst(_) -> <type-is(|ctx)> Float()
  
rules // unary and binary expressions
    
  create-type-task(|ctx):  //UnExp
  UnExp(op, e1) -> <type-is(|ctx, task2)> task3
  where
    task0 := <type-task(|ctx)> op                                      // valid combinations of types for operators 
  ; task1 := <type-task(|ctx)> e1                                      // type of subexpression
  ; task-expected := <new-task(|ctx)> Rewrite("expected-types", task0) // possible subexp types for current operator
  ; task-returned := <new-task(|ctx)> Rewrite("return-types", task0)   // corresponding return types
  ; task2 := <type-match(|ctx, task1)> task-expected                   // match expected and actual subexp type
  ; task3 := <new-task(|ctx)> Rewrite("return-un-type", (task2, task0))
  ; msg  := ["The unary operator is not expecting a subexpression of type: ", task1, ".
    Only accepts one of the following: ", task-expected, "."]
  ; <task-create-error-on-failure(|ctx, task2, ["Type match failure. ", msg])> e1
  // ; <task-create-error-on-success(|ctx, task2, ["Type match success.", msg])> e1  
        
 task-rewrite: 
  ("expected-types", operator-types) -> expression-types
  where
    expression-types := <Fst> operator-types

 task-rewrite: 
  ("return-types", operator-types) -> return-types
  where
    return-types := <Snd> operator-types
 
 task-rewrite: //idea: after matching the subexpression type retrieve the corresponding return type from the correct tuple
  ("return-un-type", tuple) -> return-type
  where
    exp-type := <Fst> tuple
  ; op-types := <Snd> tuple
  ; arg-types := <Fst> op-types
  ; ret-types := <Snd> op-types
  ; index := <get-index> (exp-type, arg-types)
  ; return-type := <index> (index, ret-types)
    
    
  create-type-task(|ctx):  //BinExp
  BinExp(op, e1, e2) -> <type-is(|ctx, [task2-e1, task2-e2])> task3
  where
    task0 := <type-task(|ctx)> op                                          // valid combinations of types for operators 
  ; task1-e1 := <type-task(|ctx)> e1                                       // type of subexpression1
  ; task1-e2 := <type-task(|ctx)> e2                                       // type of subexpression2
  ; task-expected-e1 := <new-task(|ctx)> Rewrite("expected-types1", task0) // possible subexp1 types for current operator
  ; task-expected-e2 := <new-task(|ctx)> Rewrite("expected-types2", task0) // possible subexp2 types for current operator
  ; task-returned := <new-task(|ctx)> Rewrite("return-bin-types", task0)   // corresponding return types
  ; task2-e1 := <type-match(|ctx, task1-e1)> task-expected-e1              // match expected and actual subexp1 type
  ; task2-e2 := <type-match(|ctx, task1-e2)> task-expected-e2              // match expected and actual subexp2 type  
  ; task3 := <new-task(|ctx)> Rewrite("return-bin-type", (task2-e1, task2-e2, task0)) // determine correct return type
     
  ; msg-e1  := ["The binary operator is not expecting the first subexpression to be of type: ", task1-e1, ".
    Only accepts one of the following: ", task-expected-e1, "."]
  ; msg-e2  := ["The binary operator is not expecting the second subexpression to be of type: ", task1-e2, ".
    Only accepts one of the following: ", task-expected-e2, "."]
        
  ; <task-create-error-on-failure(|ctx, task2-e1, ["Type match failure. ", msg-e1])> e1
  // ; <task-create-error-on-success(|ctx, task2-e1, ["Type E1 match success. ", msg])> e1
  ; <task-create-error-on-failure(|ctx, task2-e2, ["Type match failure. ", msg-e2])> e2
  // ; <task-create-error-on-success(|ctx, task2-e2, ["Type E2 match success. ", msg])> e2
 
 task-rewrite: 
  ("expected-types1", operator-types) -> expression-types
  where
    expression-types := <Fst> operator-types

 task-rewrite: 
  ("expected-types2", operator-types) -> return-types
  where
    return-types := <Snd> operator-types
 
  task-rewrite: 
  ("return-bin-types", operator-types) -> return-types
  where
    return-types := <Third> operator-types
    
 task-rewrite: //idea: after matching the subexpression types retrieve the corresponding return type from the correct tuple 
  ("return-bin-type", tuple) -> return-type
  where
    exp1-type := <Fst> tuple
  ; exp2-type := <Snd> tuple
  ; op-types := <Third> tuple
  ; ret-types := <Third> op-types
  ; index := <get-index> ((exp1-type, exp2-type), op-types)
  ; return-type := <index> (index, ret-types)
    
               
  // Unary Exps
  create-type-task(|ctx): UMINUS() -> <new-task(|ctx)> Combine([(Int(), Int()), (Float(), Float())])
  create-type-task(|ctx): UPLUS() -> <new-task(|ctx)> Combine([(Int(), Int()), (Float(), Float())])
  create-type-task(|ctx): UNOT() -> <new-task(|ctx)> Combine([(Int(), Int())])
  create-type-task(|ctx): USIZEOF() -> <new-task(|ctx)> Combine([(Int(), Int()), (Float(), Int()), (ArrayInt(), Int()), (ArrayFloat(), Int())])
  
  // Binary Exps
  create-type-task(|ctx): Plus() -> <new-task(|ctx)> Combine([
    (Int(), Int(), Int()),
    (Int(), Float(), Float()),
    (Float(), Int(), Float()),
    (Float(), Float(), Float())
  ])
  
  create-type-task(|ctx): Minus() -> <new-task(|ctx)> Combine([
    (Int(), Int(), Int()),
    (Int(), Float(), Float()),
    (Float(), Int(), Float()),
    (Float(), Float(), Float())
  ])

  create-type-task(|ctx): Mul() -> <new-task(|ctx)> Combine([
    (Int(), Int(), Int()),
    (Int(), Float(), Float()),
    (Float(), Int(), Float()),
    (Float(), Float(), Float())
  ])
  
  create-type-task(|ctx): And() -> <new-task(|ctx)> Combine([
    (Int(), Int(), Int()),
    (Int(), Int(), Int()),
    (Int(), Int(), Int()),
    (Int(), Int(), Int())
  ])
  
  create-type-task(|ctx): Lt() -> <new-task(|ctx)> Combine([
    (Int(), Int(), Int()), // < always returns an int
    (Int(), Float(), Int()), // < always returns an int
    (Float(), Int(), Int()), // < always returns an int
    (Float(), Float(), Int()) // < always returns an int
  ])
    
  
rules // References
	  
  
  create-type-task(|ctx): 
  Var(i) -> <type-is(|ctx)> task
  where
    task := <type-lookup(|ctx)> i
    ; msg  := ["Lookup of var ", i, " fails."]
    ; <task-create-error-on-failure(|ctx, task, msg)> i      
      
  create-type-task(|ctx): 
  Field(f) -> <type-is(|ctx, task)> task
  where
    task := <type-lookup(|ctx)> f
    ; msg  := ["Lookup of field ", f, " fails."]
    ; <task-create-error-on-failure(|ctx, task, msg)> f
    
rules // Methods  
  
create-type-task(|ctx): Arg(t, p) -> <type-is(|ctx)> t
create-type-task(|ctx): ArrayArg(t, p) -> <type-is(|ctx)> t  

    
create-type-task(|ctx):
  Call(m, p) -> <type-is(|ctx, task5)> task3
  where
    task1 := <type-lookup(|ctx)> m                              // lookup sophisticated type of method name definition
  ; task2 := <new-task(|ctx)> Rewrite("parameter-types", task1) // extract parameter types
  ; task3 := <new-task(|ctx)> Rewrite("return-type", task1)     // extract return type
  ; task4 := <type-task(|ctx)> p                                // lookup actual arguments types
  ; task5 := <type-match(|ctx, task2)> task4                    // check actual argument types w.r.t. parameter types
  ; msg  := ["Type match failed. Received arguments of type: ", task4, ". Function ", m ," expects ", task2, "."]
  ; <task-create-error-on-failure(|ctx, task5, msg)> p

task-rewrite: 
  ("parameter-types", sophisticated-type) -> parameter-types
  where
    parameter-types := <Snd> sophisticated-type

task-rewrite: 
  ("return-type", sophisticated-type) -> return-type
  where
    return-type := <Fst> sophisticated-type

  


