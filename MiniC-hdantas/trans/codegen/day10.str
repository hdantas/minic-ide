module codegen/day10

imports
  libstratego-gpp
  lib/runtime/tmpl/pp
  include/MiniC
  include/MiniC-parenthesize
  runtime/nabl/-
  runtime/task/-
  runtime/types/-
  analysis/desugar
  analysis/names
  lib/jasmin/JasminXT
  trans/codegen/challenges
  trans/codegen/day11
  

rules // Day 10
      
  exp-to-jbc: IntConst(i)   -> [LDC(i)]
  exp-to-jbc: FloatConst(f) -> [LDC(f)]
  
  stmt-to-jbc: PrintfInt(i)   -> Printf(Int(), <exp-to-jbc> i)
  stmt-to-jbc: PrintfFloat(f) -> Printf(Float(), <exp-to-jbc> f)
  
  // Provide a rule for class-to-jbc, which translates a main class from MiniJava
  // into a Jasmin class file. This rule should call stmt-to-jbc to translate the
  // statement inside the main method to a Java bytecode sequence.


  main-to-jbc: IntConst(i) -> instr* // the return value of the program is converted a printf on the main function
  with
    types  := [PUBLIC(), STATIC()]
  ; descr  := [JBCMethodDesc([Array(Reference(CRef("java/lang/String")))], Void())]
  ; stmts* := [<stmt-to-jbc> PrintfInt(IntConst(i))]
  ; instr* := Function-Constructor(types, "main", descr, stmts*)
      
  main-to-jbc: FloatConst(f) -> instr* // the return value of the program is converted a printf on the main function
  with
    types  := [PUBLIC(), STATIC()]
  ; descr  := [JBCMethodDesc([Array(Reference(CRef("java/lang/String")))], Void())]
  ; stmts* := [<stmt-to-jbc> PrintfInt(FloatConst(f))]
  ; instr* := Function-Constructor(types, "main", descr, stmts*)      
        
  // Provide a rule for program-to-jbc, which translates a MiniJava program into a
  // list of Jasmin class files. This rule should call class-to-jbc to translate the
  // main class of the program into a Jasmin class file.
  program-to-jbc: File(t, v, f, e) -> instr*
  with
    header* := [JBCHeader(
      None()
    , None()
    , JBCClass([PUBLIC()], "example/HelloWorld")
    , JBCSuper("java/lang/Object")
    , []
    , None()
    , None()
    , None()
    )]
  ; init*   := [JBCMethod(
      [PUBLIC()]
    , Init()
    , JBCMethodDesc([], Void())
    , [ ALOAD_0()
      , INVOKESPECIAL(
          JBCMethodRef(CRef("java/lang/Object"), MRef(Init()), JBCMethodDesc([], Void()))
        )
      , RETURN()
      ]
    )]
  ; fun*    := [<function-to-jbc> f]
  ; main*   := [<main-to-jbc> e]
  ; instr*  := [JBCFile(header*, [], [init*, fun*, main*])]
  
  
  to-jbc = program-to-jbc + function-to-jbc + stmt-to-jbc + exp-to-jbc
  
  