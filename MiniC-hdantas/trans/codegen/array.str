module trans/codegen/array

imports
  libstratego-gpp
  lib/runtime/tmpl/pp
  include/MiniC
  include/MiniC-parenthesize
  runtime/nabl/-
  runtime/task/-
  runtime/types/-
  analysis/desugar
  analysis/names
  lib/jasmin/JasminXT
  
  trans/codegen/type
  trans/codegen/exp
  
rules  
   array-init-to-jbc: (cref, [t | ts]) -> instr*
  with
    head-field* := <array-init-to-jbc> (cref, t)
  ; tail-field* := <array-init-to-jbc> (cref, ts)
  ; instr*      := [head-field*, tail-field*]
  
  array-init-to-jbc: (cref, [])  -> []
  

  array-init-to-jbc: (cref, ArrayDec(type, name, size)) -> instr*
  with
    load-size*   := <exp-to-jbc> IntConst(<dec-string-to-int> size) // array size is always an integer constant
  ; newarray    := NEWARRAY(<type-array-to-jbc> type) // NEWARRAY(IntName())
  ; field-desc  := <get-field-descriptor> name
  ; store-field := PUTSTATIC(JBCFieldRef(CRef(cref), FRef(name), field-desc))
  ; instr*      := [load-size*, newarray, store-field]
    
  array-init-to-jbc: (cref, FieldArrayDec(type, name, size)) -> instr*
  with
    load-size*  := <exp-to-jbc> IntConst(<dec-string-to-int> size) // array size is always an integer constant
  ; newarray    := NEWARRAY(<type-array-to-jbc> type) // NEWARRAY(IntName())
  ; field-desc  := <get-field-descriptor> name
  ; store-field := PUTFIELD(JBCFieldRef(CRef(cref), FRef(name), field-desc))
  ; instr*      := [ALOAD_0(), load-size*, newarray, store-field]

  array-init-to-jbc: (cref, nonarraydecs) -> [] //for non array fields no init is necessary
  