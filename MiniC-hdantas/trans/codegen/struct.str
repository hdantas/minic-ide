module trans/codegen/struct

imports
  libstratego-gpp
  lib/runtime/tmpl/pp
  include/MiniC
  include/MiniC-parenthesize
  runtime/nabl/-
  runtime/task/-
  runtime/types/-
  analysis/desugar
  analysis/names
  lib/jasmin/JasminXT
  trans/codegen/builders



  rules

  struct-to-jbc: [StructDec(name, fields), t | ts] -> instr*
  with
    head-field* := [<struct-to-jbc> StructDec(name, fields)]
  ; tail-field* := <struct-to-jbc> [t | ts]
  ; instr*      := [head-field*, tail-field*]
  
  struct-to-jbc: [StructDec(name, fields)] -> [<struct-to-jbc> StructDec(name, fields)]
  struct-to-jbc: []  -> []
  
  
  struct-to-jbc: StructDec(name, fields) -> ""
  with 
    name-jbc    := [JBCClass([PUBLIC()], name)]
  ; superclass  := [JBCSuper("java/lang/Object")]
  ; fields-jbc* := <struct-to-jbc> fields
  ; methods     := ["TODO Methods"]
  ; instr*      := Class-Constructor(name-jbc, superclass, fields-jbc*, methods)
  ; <write-file> (name, instr*)
    
    
  struct-to-jbc: [FieldDec(ty, name), t | ts] -> instr*
  with
    head-field* := <struct-to-jbc> FieldDec(ty, name)
  ; tail-field* := <struct-to-jbc> [t | ts]
  ; instr*      := [head-field*, tail-field*]
  
  struct-to-jbc: [FieldDec(ty, name)] -> [<struct-to-jbc> FieldDec(ty, name)]
  struct-to-jbc: []  -> []
  
  struct-to-jbc: FieldDec(ty, name) -> instr*
  with
    descript := JBCFieldDesc(ty)
  ; instr*   := [JBCField([PRIVATE()], name, descript, None(), None())]
    
    
overlays
      
Class-Constructor(name, superclass, JBCfields, JBCmethods) = //main-to-c
  JBCFile(
    JBCHeader(
      None()
    , None()
    , name 
    , superclass
    , []
    , None()
    , None()
    , None()
    )
  , JBCfields
  , JBCmethods
  )
  
  
  
  