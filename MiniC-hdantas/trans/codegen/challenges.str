module codegen/challenges

imports
  libstratego-gpp
  lib/runtime/tmpl/pp
  include/MiniC
  include/MiniC-parenthesize
  runtime/nabl/-
  runtime/task/-
  runtime/types/-
  analysis/desugar
  analysis/names
  lib/jasmin/JasminXT
  trans/codegen/day10
  trans/codegen/day11

// DAY 10
overlays 
  
  Printf(type, i) = //printfInt or printfFloat
  [
    [GETSTATIC(
      JBCFieldRef(
        CRef("java/lang/System")
      , FRef("out")
      , JBCFieldDesc(Reference(CRef("java/io/PrintStream")))
      )
    )] // push System.out onto the stack
  , [i] // push a string onto the stack
  , [INVOKEVIRTUAL(
      JBCMethodRef(
        CRef("java/io/PrintStream")
      , MRef("println")
      , JBCMethodDesc(type, Void())
      )
    )]
  ]    
 
// DAY 11    
overlays
  
  Function-Constructor(types, name, descr, stmts) =
  [
    JBCMethod(
      types
    , name
    , descr
    , [ JBCLimitStack("4"), JBCLimitLocals("2")
        // JBCLimitStack(<stack-limit> [0, stmts])
      , stmts
      , RETURN()
      ]
    )
  ]
    
    
rules
	nabl-prop-site(|lang, ctx, uris, states, implicits): FunctionDef(ty, mname, param*, stmt*, exp) -> <fail>
  where
  	new-param := <map(get-type)> param*
  ; descr := [JBCMethodDesc(new-param, ty)] // create descriptor
  ; <store-descriptor(|ctx, descr)> mname
    
    
  stack-limit: [previous-limit, statements] -> current-limit
  with
    //current-limit := <foldr(!0, add, inc)> statements
    current-limit := "world"
    
// DAY 12