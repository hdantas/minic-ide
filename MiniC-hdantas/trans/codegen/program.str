module trans/codegen/program

imports
  include/MiniC
  runtime/nabl/-
  runtime/task/-
  runtime/types/-
  analysis/desugar
  analysis/names
  lib/jasmin/JasminXT

  trans/codegen/stmt
  trans/codegen/function
  trans/codegen/exp

rules

program-to-jbc: File(structs, vars, functions, expression) -> instr*
  with
    header   := JBCHeader(
      None()
    , None()
    , JBCClass([PUBLIC()], "example/HelloWorld")
    , JBCSuper("java/lang/Object")
    , []
    , None()
    , None()
    , None()
    )
  ; fields*  := [<stmt-to-jbc> vars]
  ; init        :=
    JBCMethod(
      [PUBLIC()]
    , Init()
    , JBCMethodDesc([], Void())
    , [ ALOAD_0()
      , INVOKESPECIAL(
          JBCMethodRef(CRef("java/lang/Object"), MRef(Init()), JBCMethodDesc([], Void()))
        )
      , RETURN()
      ]
    )
  ; fun*        := [<function-to-jbc> functions]
  ; main*       := [Main-Constructor(<exp-to-jbc> expression, <get-type> expression)]
  ; methods*    := [init, fun*, main*]
  ; instr*      := JBCFile(header, fields*, methods*)


overlays 


  
  Main-Constructor(return-exp, type) =
    JBCMethod(
      [PUBLIC(), STATIC()]
    , "main"
    , JBCMethodDesc([Array(Reference(CRef("java/lang/String")))], Void())
    , [ JBCLimitStack("2")
      , GETSTATIC(
          JBCFieldRef(
            CRef("java/lang/System")
          , FRef("out")
          , JBCFieldDesc(Reference(CRef("java/io/PrintStream")))
          )
        )
      , return-exp
      , INVOKEVIRTUAL(
          JBCMethodRef(
            CRef("java/io/PrintStream")
          , MRef("println")
          , JBCMethodDesc([type], Void())
          )
        )
      , RETURN()
      ]
    )
    
