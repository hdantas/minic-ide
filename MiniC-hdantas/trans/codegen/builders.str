module trans/codegen/builders

imports
	lib/editor-common.generated
	lib/jasmin/JasminXT
	lib/jasmin/JasminXT-pp
	lib/runtime/task/-
	lib/runtime/index/-
	
	include/MiniC
  
	trans/codegen/program
	trans/codegen/struct
	trans/codegen/function
	trans/codegen/stmt
	trans/codegen/exp
	trans/codegen/field

rules // Class files
	      
	generate-class: // Generates the MiniC (single) class file and put in bin/
		(selected, position, ast, path, project-path) -> None()
		with
		  <generate-jbc> (selected, position, ast, path, project-path)
		;	dir            := <project-path>
		; main-class     := <base-filename> path
		; other-classes* := <ast-to-filename> ast
		; filenames*     := [main-class, other-classes*]
		; <debug> filenames*
		; src-dir        := $[[dir]/programs/src-gen]
		; bin-dir        := $[[dir]/programs/bin]
		; <map(compile-files(|src-dir, bin-dir, main-class))> filenames*
    
  compile-files(|src-dir, bin-dir, main-class): file -> None()
  with
    filename := <guarantee-extension(|"j")> $[[src-dir]/[file]]
  ; <call> ("java", ["-jar", $[[<project-path>]/lib/jasmin.jar], "-d", bin-dir, filename])
  ; classname := <if(
    	<eq> (<guarantee-extension(|"mic")> file, main-class),
    	<refresh-workspace-file> $[[bin-dir]/[file].class],
      <refresh-workspace-file> $[[bin-dir]/ritchie/[file].class]
    )>

  
rules // Jasmin bytecode
    
  generate-jbc: // Generates the Jasmin bytecode file and put in src-gen/
    (selected, position, ast, path, project-path) -> None() //(filename, result)
  with
    index-setup(|<language>, project-path); task-setup(|project-path)
  ; filename  := <base-filename> path
  ; jbc       := <program-to-jbc; pp-jasminxt-string> ast
  ; <write-file> (filename, jbc)

    
  partial-generate-jbc:
    (selected, position, ast, path, project-path) -> (filename, result)
  with
  index-setup(|<language>, project-path); task-setup(|project-path)
  ; filename := <guarantee-extension(|"j")> path
  ; jbc      := <to-jbc> selected
  ; result   := <pp-jasminxt-string> jbc
  

rules // Run class files

  execute-class:
    (selected, position, ast, path, project-path) -> None() //(filename, result)
    with
      <generate-class> (selected, position, ast, path, project-path)
    ; cname    := "ritchie"
    ; cpath    := $[[<project-path>]/programs/bin/]
    ; filename := <guarantee-extension(|"result.txt")> $[[cpath]/[cname]]
    ; <call> ("java", ["-cp", cpath, cname]) => result
      

rules // Auxiliary
  
  write-file: (classname, jbc) -> filename
  with
    dir         := <getcwd> // obtain current working directory
  ; src-dir     := $[[dir]/programs/src-gen]
  ; <try(mkdir)> src-dir
  ; filename    := <guarantee-extension(|"j")> $[[src-dir]/[classname]]
  ; result      := <pp-jasminxt-string> jbc
  ; fd          := <fopen> (filename, "w")
  ; <fputs> (result, fd)
  ; <fclose> fd
  ; <refresh-workspace-file> filename


  ast-to-filename: File(struct, _, _, _) -> filename
  with
    filename := <map(get-struct-name)> struct
    
  get-struct-name: StructDec(name, _) -> <strip-annos> name
        
  to-jbc = program-to-jbc + struct-to-jbc + field-to-jbc + function-to-jbc + stmt-to-jbc + exp-to-jbc

