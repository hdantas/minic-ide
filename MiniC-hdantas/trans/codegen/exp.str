module trans/codegen/exp

imports
  libstratego-gpp
  include/MiniC
  include/MiniC-parenthesize
  runtime/nabl/-
  runtime/task/-
  runtime/types/-
  analysis/desugar
  analysis/names
  lib/jasmin/JasminXT
  runtime/editor/origins
  trans/codegen/type

rules
  
  exp-to-jbc-ln: [t | ts] -> instr*
  with
    head-stmt* := <exp-to-jbc> t
  ; linenumber := JBCLine(<origin-line; inc> t)
  ; tail-stmt* := <exp-to-jbc-ln> ts
  ; instr*     := [linenumber, head-stmt*, tail-stmt*]
  
  exp-to-jbc-ln: [] -> []
  exp-to-jbc-ln: s -> <exp-to-jbc-ln> [s]
  
  exp-to-jbc: [t | ts] -> <exp-to-jbc-ln> [t | ts]
  exp-to-jbc: [] -> []
  
  
  exp-to-jbc: IntConst(i)   -> [LDC(i)]
  exp-to-jbc: FloatConst(f) -> [LDC(f)]
      
  // Unary Expressions
  exp-to-jbc: UnExp(uop, e) -> instr*
  with
    exp*   := <op-to-jbc> UnExp(uop, e)
  ; instr* := [exp*]

  // Unary Operators
  op-to-jbc: UnExp(UPLUS(), e) -> instr*
  with
  	exp*   := <exp-to-jbc> e
  ; instr* := [exp*]
  
  op-to-jbc: UnExp(UMINUS(), e) -> instr*
  with
    exp*   := <exp-to-jbc> e
  ; instr* := [LDC("0"), exp*, ISUB()]
  
  
  op-to-jbc: UnExp(UNOT(), e)  -> instr*
  with
    false-label := <newname>
  ; end-label   := <newname>
  ; exp*        := <exp-to-jbc> e
  ; instr*      := [
      exp*
    , IFNE(LabelRef(false-label))
    , ICONST_1()
    , GOTO(LabelRef(end-label))
    , JBCLabel(false-label)
    , ICONST_0()
    , JBCLabel(end-label)
  ]

  op-to-jbc: UnExp(USIZEOF(), Var(v)) -> instr
  with
    instr := <if(<get-size> Var(v), <sizeof-aux> ("normal", Var(v)), <sizeof-aux> ("instance", Var(v)))>
    
  sizeof-aux: ("instance", Var(v)) -> instr
  with
    instr := <exp-to-jbc> IntConst(<get-type; special-type-to-int> Var(v))
      
  sizeof-aux: ("normal", Var(v)) -> instr
  with
    instr := <exp-to-jbc> IntConst(<get-size> Var(v))
  
  op-to-jbc: UnExp(USIZEOF(), e) -> instr
  with
    instr := <exp-to-jbc> IntConst(<get-type; type-to-int> e)     

  // Binary Expressions
  exp-to-jbc: BinExp(bop, e1, e2) -> instr*
  with
    exp*   := <op-to-jbc> BinExp(bop, e1, e2)
  ; instr* := [exp*]
   
  // Binary Operators
  op-to-jbc: BinExp(Plus(), e1, e2) -> instr*
  with
    exp1*  := <exp-to-jbc> e1
  ; exp2*  := <exp-to-jbc> e2
  ; instr* := [exp1*, exp2*, IADD()]
    
  op-to-jbc: BinExp(Minus(), e1, e2) -> instr*
  with
    exp1*  := <exp-to-jbc> e1
  ; exp2*  := <exp-to-jbc> e2
  ; instr* := [exp1*, exp2*, ISUB()]
     
  op-to-jbc: BinExp(Mul(), e1, e2) -> instr*
  with
    exp1*  := <exp-to-jbc> e1
  ; exp2*  := <exp-to-jbc> e2
  ; instr* := [exp1*, exp2*, IMUL()]
    
  op-to-jbc: BinExp(And(), e1, e2) -> instr*
  with
    exp1*       := <exp-to-jbc> e1
  ; exp2*       := <exp-to-jbc> e2
  ; false-label := <newname>
  ; end-label   := <newname>
  ; instr*      := [
        exp1*
      , IFEQ(LabelRef(false-label))
      , exp2*
      , IFEQ(LabelRef(false-label))
      , ICONST_1()
      , GOTO(end-label)
      , JBCLabel(false-label)
      , ICONST_0()
      , JBCLabel(end-label) 
    ]
    
    
  op-to-jbc: BinExp(Lt(), e1, e2) -> instr*
  with
    true-label := <newname>
  ; end-label  := <newname>
  ; exp1*      := <exp-to-jbc> e1
  ; exp2*      := <exp-to-jbc> e2
  ; instr*     := [
      exp1*
    , exp2*
    , IF_ICMPLT(LabelRef(true-label))
    , ICONST_0()
    , GOTO(LabelRef(end-label))
    , JBCLabel(true-label)
    , ICONST_1()
    , JBCLabel(end-label)
    ]

  exp-to-jbc: Call(c, e) -> instr*
  with
    args* := <exp-to-jbc> e
  ; descr := <get-method-descriptor> c
  ; call* := [
    INVOKEVIRTUAL(
      JBCMethodRef(
        CRef("ritchie")
      , MRef(c)
      , descr
      )
    )]
  ; instr* := [ALOAD_0(), args*, call*]
  
  exp-to-jbc: StructMember(Var(v), Field(f)) -> instr
  with
  	instr := <if(<get-var-index> Var(v), <local-instance-to-jbc> (Var(v), Field(f)), <global-instance-to-jbc> (Var(v), Field(f)))>
  
  local-instance-to-jbc: (Var(v), Field(f)) -> instr //handles local struct instances
  with
    index     := <get-var-index> v // fails for non local variables
  ; loadinstr := <Fst> index //get load instr from index
  ; fielddesc := <get-field-descriptor> Field(f)
  ; cref      := <get-type; type-to-jbc; get-arguments; index(|1); get-arguments; index(|1)> Var(v)
  ; fieldref  := GETFIELD(JBCFieldRef(CRef(cref), FRef(f), fielddesc))
  ; instr     := [loadinstr, fieldref]
      
  global-instance-to-jbc: (Var(v), Field(f)) -> instr //handles global struct instances
  with
    vardesc := <get-field-descriptor> v
  ;	loadinstr := [ALOAD_0(), GETFIELD(JBCFieldRef(CRef("ritchie"), FRef(v), vardesc))]
  ; fielddesc := <get-field-descriptor> Field(f)
  ; cref      := <get-type; type-to-jbc; get-arguments; index(|1); get-arguments; index(|1)> Var(v)
  ; fieldref  := GETFIELD(JBCFieldRef(CRef(cref), FRef(f), JBCFieldDesc(fielddesc)))
  ; instr     := [loadinstr, fieldref]
  
  exp-to-jbc: StructMember(Var(v), ArrayField(f, index)) -> instr
  with
  	instr := <if(<get-var-index> Var(v), <local-array-instance-to-jbc> (Var(v), ArrayField(f, index)), <global-array-instance-to-jbc> (Var(v), ArrayField(f, index)))>
    
  local-array-instance-to-jbc: (Var(name), ArrayField(f, index)) -> instr* //handles field arrays of local struct instances
  with
    varaccess*   := <get-var-index; Fst> Var(name) //get load instr from index
  ; fielddesc    := <get-field-descriptor> f
  ; cref         := <get-type; type-to-jbc; get-arguments; index(|1); get-arguments; index(|1)> Var(name)
  ; load-instr   := GETFIELD(JBCFieldRef(CRef(cref), FRef(f), fielddesc))
  ; index-instr* := <exp-to-jbc> index
  ; load-array*  := <get-type; array-load-aux> f
  ; instr*       := [varaccess*, load-instr, index-instr*]
  
  
  global-array-instance-to-jbc: (Var(name), ArrayField(f, index)) -> instr* //handles field arrays of global struct instances
  with
    vardesc      := <get-field-descriptor> Var(name)
  ; varaccess*   := [ALOAD_0(), GETFIELD(JBCFieldRef(CRef("ritchie"), FRef(name), vardesc))]
  ; fielddesc    := <get-field-descriptor> f
  ; cref         := <get-type; type-to-jbc; get-arguments; index(|1); get-arguments; index(|1)> Var(name)
  ; load-instr   := GETFIELD(JBCFieldRef(CRef(cref), FRef(f), fielddesc))
  ; index-instr* := <exp-to-jbc> index
  ; load-array*  := <get-type; array-load-aux> f
  ; instr*       := [varaccess*, load-instr, index-instr*]
    
 
   
   
 
  exp-to-jbc: ArrayVar(name, index) -> instr //only local vars have indices
  with //ArrayVar("global", IntConst("0"))
    instr := <if(<get-var-index> name, <local-array-to-jbc> (name, index), <global-array-to-jbc> (name, index))>
    
  local-array-to-jbc: (name, index) -> instr* //handles local arrays
  with
    var-index    := <get-var-index> name
  ; load-instr*  := <Fst> var-index //get load instr from index
  ; index-instr* := <exp-to-jbc> index
  ; load-array*  := <Third> var-index
  ; instr*       := [load-instr*, index-instr*, load-array*]
  
  
  global-array-to-jbc: (name, index) -> instr* //handles global arrays
  with
    fielddesc   := <get-field-descriptor> name
  ; load-instr   := GETSTATIC(JBCFieldRef(CRef("ritchie"), FRef(name), fielddesc))
  ; index-instr* := <exp-to-jbc> index
  ; load-array*  := <get-type; array-load-aux> name
  ; instr*       := [load-instr, index-instr*, load-array*]
  
  array-load-aux: Int()   -> [IALOAD()]
  array-load-aux: Float() -> [FALOAD()]
  
  
  exp-to-jbc: Var(v) -> instr //only local vars have indices
  with
    instr := <if(<get-var-index> v, <local-var-to-jbc> Var(v), <global-var-to-jbc> Var(v))>
    
  local-var-to-jbc: Var(v) -> instr //handles local vars
  with
    index := <get-var-index> v // fails for non local variables
  ; instr := <Fst> index //get load instr from index
    
  global-var-to-jbc: Var(v) -> instr //handles global vars
  with
    fielddesc := <get-field-descriptor> v
  ;	instr     := [GETSTATIC(JBCFieldRef(CRef("ritchie"), FRef(v), fielddesc))]
   	