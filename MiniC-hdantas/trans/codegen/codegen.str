module codegen/codegen

imports
  libstratego-gpp
  lib/runtime/tmpl/pp
  include/MiniC
  include/MiniC-parenthesize
  runtime/nabl/-
  runtime/task/-
  runtime/types/-
  analysis/desugar
  analysis/names
  lib/jasmin/JasminXT
  lib/jasmin/JasminXT-pp

rules

  generate-jbc:
    (selected, position, ast, path, project-path) -> (filename, result)
  with
    filename := <guarantee-extension(|"jbc.mic")> path
  ; result   := <program-to-jbc> ast
    
  partial-generate-jbc:
    (selected, position, ast, path, project-path) -> (filename, result)
  with
    filename := <guarantee-extension(|"jbc.mic")> path
  ; jbc      := <to-jbc> selected
  ; result   := <pp-jasminxt-string> jbc
      
  exp-to-jbc: IntConst(i)   -> [LDC(i)]
  // exp-to-jbc: FloatConst(f) -> [LDC(f)]
  
  // Provide a rule for stmt-to-jbc, which translates a print statement from MiniJava
  // into a sequence of Java bytecode instructions. This rule should call exp-to-jbc to
  // translate the expression inside the print statement to a Java bytecode sequence.
  stmt-to-jbc: PrintfInt(i) -> instr
  with
    instr1 := "getstatic java/lang/System/out Ljava/io/PrintStream;" // push System.out onto the stack
  ; instr2 := <exp-to-jbc> i                                         // push a string onto the stack
  ; instr3 := "invokevirtual java/io/PrintStream/println(I)V"        // call the PrintStream.println() method.
  ; instr  := [instr1, instr2, instr3]
      
  // stmt-to-jbc: PrintfFloat(f) -> instr*
  // with
  //   instr1* := "getstatic java/lang/System/out Ljava/io/PrintStream;" // push System.out onto the stack
  // ; instr2* := <exp-to-jbc> f                                         // push a string onto the stack
  // ; instr3* := "invokevirtual java/io/PrintStream/println(I)V"        // call the PrintStream.println() method.
  // ; instr*  := [instr1*, instr2*, instr3*]
    
  
  // Provide a rule for class-to-jbc, which translates a main class from MiniJava
  // into a Jasmin class file. This rule should call stmt-to-jbc to translate the
  // statement inside the main method to a Java bytecode sequence.
  function-to-jbc: FunctionDef(t, i, p, [s], e) -> instr
  with
    instr := <stmt-to-jbc> s
  
  // Provide a rule for program-to-jbc, which translates a MiniJava program into a
  // list of Jasmin class files. This rule should call class-to-jbc to translate the
  // main class of the program into a Jasmin class file.
  program-to-jbc: File(t, v, [f], e) -> instr
  with
    instr := <function-to-jbc> f
  
  
  to-jbc = program-to-jbc + function-to-jbc + stmt-to-jbc + exp-to-jbc