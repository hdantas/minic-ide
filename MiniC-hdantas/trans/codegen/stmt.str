module trans/codegen/stmt

imports
  libstratego-gpp
  lib/runtime/tmpl/pp
  include/MiniC
  include/MiniC-parenthesize
  runtime/nabl/-
  runtime/task/-
  runtime/types/-
  analysis/desugar
  analysis/names
  lib/jasmin/JasminXT
  
  trans/codegen/type
  trans/codegen/exp


rules // STATEMENTS 
  
  // Recursive call when multiple statements exist
  stmt-to-jbc: [s, t | ts] -> instr*
  with
    head-stmt* := <stmt-to-jbc> s
  ; tail-stmt* := <stmt-to-jbc> [t | ts]
  ; instr*     := [head-stmt*, tail-stmt*]
  
  stmt-to-jbc: [s] -> <stmt-to-jbc> s
  stmt-to-jbc: []  -> []
  

  stmt-to-jbc: PrintfInt(i) -> instr
  with
    instr := <printf-aux> i
  
  stmt-to-jbc: PrintfFloat(f) -> instr
  with
    instr := <printf-aux> f
  
  printf-aux: expression -> instr*
  with
    static := GETSTATIC(JBCFieldRef(CRef("java/lang/System"), FRef("out"), JBCFieldDesc(Reference(CRef("java/io/PrintStream")))))
  ; exp*   := <exp-to-jbc> expression
  ; invoke := INVOKEVIRTUAL(JBCMethodRef(CRef("java/io/PrintStream"), MRef("println"), JBCMethodDesc(<get-type> expression, Void())))
  ; instr* := [static, exp*, invoke]
  
  stmt-to-jbc: CodeBlock(c) -> [<stmt-to-jbc> c]

  stmt-to-jbc: IfElse(cond, if-stmt, else-stmt) -> instr*
  with
    else-label     := <newname>
  ; end-label      := <newname>
  ; jbc-cond*      := <exp-to-jbc> cond
  ; jbc-if-stmt*   := <stmt-to-jbc> if-stmt
  ; jbc-else-stmt* := <stmt-to-jbc> else-stmt  
  ; instr*         := [
      jbc-cond*
    , IFEQ(LabelRef(else-label))
    , jbc-if-stmt*
    , GOTO(LabelRef(end-label))
    , JBCLabel(else-label)
    , jbc-else-stmt*
    , JBCLabel(end-label)
    ]
  
            
  stmt-to-jbc: While(cond, stmt) -> instr*
  with
    cond-label := <newname>
  ; loop-label := <newname>
  ; end-label  := <newname>
  ; jbc-stmt*  := <stmt-to-jbc> stmt
  ; jbc-cond*  := <exp-to-jbc> cond
  ; instr*     := [
    GOTO(LabelRef(cond-label))
    , JBCLabel(loop-label)
    , jbc-stmt*
    , JBCLabel(cond-label)
    , jbc-cond*
    , IFNE(LabelRef(loop-label))
    , JBCLabel(end-label)
    ]
 
    
rules // Generate Code for Local Variables and Variable Access

  stmt-to-jbc: VarDec(Struct(ty), name) -> instr //instr
  with
    struct-name := $[HelloWorld/[ty]]
  ; new-object := NEW(CRef(struct-name))
  ; constructor := INVOKESPECIAL(
	    JBCMethodRef(
	    CRef(struct-name)
	    , MRef(Init())
	    , JBCMethodDesc(
	        [Reference(CRef("HelloWorld")), Reference(CRef("HelloWorld"))]
	      , Void()
	      )
	    )
    )
  ; index    := <get-var-index> name
  ; store    := <Snd> index //retrieve store instr from index 
  ; instr    := [new-object, DUP(), ALOAD_0(), ACONST_NULL(), constructor, store]

    
  stmt-to-jbc: VarDec(ty, name) -> []
  stmt-to-jbc: ArrayDec(ty, name, size) -> instr*
  with
    load-size*  := <exp-to-jbc> IntConst(<dec-string-to-int> size) // array size is always an integer constant
  ; newarray    := NEWARRAY(<type-array-to-jbc> ty) // NEWARRAY(IntName()) 
  ; var-index  := <get-var-index> name // fails for non local var
  ; store-jbc* := <Snd> var-index //retrieve store instr from index
  ; instr*     := [load-size*, newarray, store-jbc*]


rules //assignments Assignment(Var("a"), IntConst("1"))

  stmt-to-jbc: Assignment(StructMember(var, field), ArrayVar(array, index)) -> instr* //array assignments to fields
  with 
    fieldaccess  := <exp-to-jbc> StructMember(var, field)
  ; arrayaccess  := <exp-to-jbc> Var(array)
  ; index*       := <exp-to-jbc> index
  ; indexaccess* := [index*, IALOAD()]
  ; instr*       := [GETFIELD(arrayaccess), indexaccess*, PUTFIELD(fieldaccess)]
    
  stmt-to-jbc: Assignment(StructMember(var, Field(f)), exp) -> instr*  //assignments to fields
  with
    varaccess*  := <exp-to-jbc> var
  ; expaccess*  := <exp-to-jbc> exp
  ; class-name  := $[HelloWorld/[<get-type; get-arguments; index(|1)> var]]
  ; setter-name := $[set_[f]]
  ; exp-type    := <get-type> exp
  ; instr*      := [varaccess*, expaccess*, INVOKESTATIC(
		  JBCMethodRef(
		    CRef(class-name)
		  , MRef(setter-name)
		  , JBCMethodDesc([Reference(CRef(class-name)), exp-type], exp-type)
		  )
		), POP()]


  stmt-to-jbc: Assignment(ArrayVar(arrayname, index), exp) -> instr*
  with // Assignment(ArrayVar("global", IntConst("3")), IntConst("0"))
    load-field*  := <exp-to-jbc> Var(arrayname)
  ; load-index*  := <exp-to-jbc> index
  ; load-exp*    := <exp-to-jbc> exp
  ; store-field* := <get-type; array-store-aux> exp
  ; instr*       := [load-field*, load-index*, load-exp*, store-field*]
    
  array-store-aux: Int() ->   [IASTORE()]
  array-store-aux: Float() -> [FASTORE()]
  
  stmt-to-jbc: Assignment(var, exp) -> instr
  with
  //only local vars have indices
    instr := <if(<get-var-index> var, <local-stmt-to-jbc> Assignment(var, exp), <global-stmt-to-jbc> Assignment(var, exp))>
    
  local-stmt-to-jbc: Assignment(var, exp) -> instr* // assignment to local var
  with
    var-index  := <get-var-index> var // fails for non local var
  ; exp-jbc*   := <exp-to-jbc> exp
  ; store-jbc* := <Snd> var-index //retrieve store instr from index
  ; instr*     := [exp-jbc*, store-jbc*]
    
  // store-aux: (index, Int())   -> [ISTORE(index)]
  // store-aux: (index, Float()) -> [FSTORE(index)]
  // store-aux: (index, otherty) -> [ASTORE(index)]
    
  global-stmt-to-jbc: Assignment(var, exp) -> instr* // assignment to global var
  with
    expaccess* := <exp-to-jbc> exp
  ; var-jbc    := <exp-to-jbc> var
  ; varaccess  := <get-arguments; index(|1); get-arguments; index(|1)> var-jbc //remove outer "GETSTATIC()"
  ; instr*     := [expaccess*, PUTSTATIC(varaccess)]
    
rules // auxiliary
  // get-field-or-const: [IntConst(_), jbc]   -> jbc // dont use GETSTATIC() for constants 
  // get-field-or-const: [FloatConst(_), jbc] -> jbc // dont use GETSTATIC() for constants
  // get-field-or-const: [var, jbc]           -> instr
  // with
  //   instr := <if(<get-var-index> var, <local-access> jbc, <field-access> jbc)>
  //     
  // field-access: jbc -> GETSTATIC(jbc)
  // local-access: jbc -> jbc
