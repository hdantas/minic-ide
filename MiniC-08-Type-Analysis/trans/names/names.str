module names/names

imports
  lib/runtime/nabl/-
  lib/runtime/task/-
  lib/runtime/properties/-
  lib/runtime/types/-
  lib/runtime/editor/-
  include/MiniC
  names/types
  analysis/desugar


signature
  constructors
    NablNsStruct   : Namespace
    NablNsField    : Namespace
    NablNsVariable : Namespace


rules

  nabl-scoping-site =
    ?File(_, _, _, _)
    ; origin-track-forced(
        nabl-scope(
        | [NablNsStruct(), NablNsVariable()]
        )
      |
      )

  nabl-get-scope =
    ?File(_, _, _, _)
    ; ![NablNsStruct(), NablNsVariable()]


rules

  nabl-get-scope =
    ?StructDec(s, _)
    ; ![NablNsField()]

  nabl-get-name :
    StructDec(s, _) -> s

  nabl-name-apply(s) =
    StructDec(s, id)

  nabl-def-site(child-uris__, sibl-uris__, implicits__|lang__, partition__, uniques__, uri__, states__) =
    ?StructDec(s, _)
    ; origin-track-forced(
        StructDec(
          nabl-def(
            ?c-uri1__
          , ?s-uri1__
          | lang__
          , partition__
          , uniques__
          , uri__
          , uri__
          , NablNsStruct()
          , Unique()
          , Current()
          , [NablNsField()]
          , []
          )
        , id
        )
        ; match(child-uris__|c-uri1__)
        ; match(sibl-uris__|s-uri1__)
        ; match(implicits__|[])
      |
      )

  nabl-prop-site(|lang__, partition__, uris__, states__, implicits__) =
    ?StructDec(s, _)
    ; origin-track-forced(
        StructDec(
          nabl-store-props(
          | partition__
          , [Prop(Type(), s, [])]
          )
        , id
        )
      |
      )

  nabl-get-name :
    Struct(s) -> s

  nabl-name-apply(s) =
    Struct(s)

  nabl-use-site(|lang__, partition__, uniques__, uris__, states__) =
    ?Struct(s)
    ; origin-track-forced(
        Struct(
          nabl-use(
          | lang__
          , partition__
          , uniques__
          , uris__
          , [ UseCandidate(
                NablNsStruct()
              , []
              , Current()
              , True()
              , []
              )
            ]
          )
        )
      |
      )

  nabl-get-name :
    FieldDec(t, v) -> v

  nabl-name-apply(s) =
    FieldDec(id, s)

  nabl-def-site(child-uris__, sibl-uris__, implicits__|lang__, partition__, uniques__, uri__, states__) =
    ?FieldDec(t, v)
    ; origin-track-forced(
        FieldDec(
          id
        , nabl-def(
            ?c-uri1__
          , ?s-uri1__
          | lang__
          , partition__
          , uniques__
          , uri__
          , uri__
          , NablNsField()
          , Unique()
          , Current()
          , []
          , []
          )
        )
        ; match(child-uris__|c-uri1__)
        ; match(sibl-uris__|s-uri1__)
        ; match(implicits__|[])
      |
      )

  nabl-prop-site(|lang__, partition__, uris__, states__, implicits__) =
    ?FieldDec(t, v)
    ; origin-track-forced(
        FieldDec(
          id
        , nabl-store-props(
          | partition__
          , [Prop(Type(), t, [])]
          )
        )
      |
      )

  nabl-get-name :
    FieldArrayDec(t, v, _) -> v

  nabl-name-apply(s) =
    FieldArrayDec(id, s, id)

  nabl-def-site(child-uris__, sibl-uris__, implicits__|lang__, partition__, uniques__, uri__, states__) =
    ?FieldArrayDec(t, v, _)
    ; origin-track-forced(
        FieldArrayDec(
          id
        , nabl-def(
            ?c-uri1__
          , ?s-uri1__
          | lang__
          , partition__
          , uniques__
          , uri__
          , uri__
          , NablNsField()
          , Unique()
          , Current()
          , []
          , []
          )
        , id
        )
        ; match(child-uris__|c-uri1__)
        ; match(sibl-uris__|s-uri1__)
        ; match(implicits__|[])
      |
      )

  nabl-prop-site(|lang__, partition__, uris__, states__, implicits__) =
    ?FieldArrayDec(t, v, _)
    ; origin-track-forced(
        FieldArrayDec(
          id
        , nabl-store-props(
          | partition__
          , [Prop(Type(), t, [])]
          )
        , id
        )
      |
      )

  nabl-get-name :
    StructMember(v, f) -> f

  nabl-name-apply(s) =
    StructMember(id, s)

  nabl-use-site(|lang__, partition__, uniques__, uris__, states__) =
    ?StructMember(v, f)
    ; origin-track-forced(
        where(r5-1-1-1__ := <get-property-task(|Type())> v)
        ; where(r5-1-1-1-1__ := <new-task(|partition__)> Rewrite("match5-1-1-1-1", (r5-1-1-1__, [])))
        ; StructMember(
            id
          , nabl-use(
            | lang__
            , partition__
            , uniques__
            , uris__
            , [ UseCandidate(
                  NablNsField()
                , []
                , Context(
                    NablNsStruct()
                  , r5-1-1-1-1__
                  , []
                  , Current()
                  )
                , True()
                , [r5-1-1-1-1__]
                )
              ]
            )
          )
      |
      )

  task-rewrite :
    ( "match5-1-1-1-1"
    , (Struct(s), [])
    ) -> s


rules

  nabl-get-name :
    VarDec(t, v) -> v

  nabl-name-apply(s) =
    VarDec(id, s)

  nabl-def-site(child-uris__, sibl-uris__, implicits__|lang__, partition__, uniques__, uri__, states__) =
    ?VarDec(t, v)
    ; origin-track-forced(
        VarDec(
          id
        , nabl-def(
            ?c-uri1__
          , ?s-uri1__
          | lang__
          , partition__
          , uniques__
          , uri__
          , uri__
          , NablNsVariable()
          , Unique()
          , Current()
          , []
          , []
          )
        )
        ; match(child-uris__|c-uri1__)
        ; match(sibl-uris__|s-uri1__)
        ; match(implicits__|[])
      |
      )

  nabl-prop-site(|lang__, partition__, uris__, states__, implicits__) =
    ?VarDec(t, v)
    ; origin-track-forced(
        VarDec(
          id
        , nabl-store-props(
          | partition__
          , [Prop(Type(), t, [])]
          )
        )
      |
      )

  nabl-get-name :
    ArrayDec(t, v, _) -> v

  nabl-name-apply(s) =
    ArrayDec(id, s, id)

  nabl-def-site(child-uris__, sibl-uris__, implicits__|lang__, partition__, uniques__, uri__, states__) =
    ?ArrayDec(t, v, _)
    ; origin-track-forced(
        ArrayDec(
          id
        , nabl-def(
            ?c-uri1__
          , ?s-uri1__
          | lang__
          , partition__
          , uniques__
          , uri__
          , uri__
          , NablNsVariable()
          , Unique()
          , Current()
          , []
          , []
          )
        , id
        )
        ; match(child-uris__|c-uri1__)
        ; match(sibl-uris__|s-uri1__)
        ; match(implicits__|[])
      |
      )

  nabl-prop-site(|lang__, partition__, uris__, states__, implicits__) =
    ?ArrayDec(t, v, _)
    ; origin-track-forced(
        ArrayDec(
          id
        , nabl-store-props(
          | partition__
          , [Prop(Type(), t, [])]
          )
        , id
        )
      |
      )

  nabl-get-name :
    Arg(t, a) -> a

  nabl-name-apply(s) =
    Arg(id, s)

  nabl-def-site(child-uris__, sibl-uris__, implicits__|lang__, partition__, uniques__, uri__, states__) =
    ?Arg(t, a)
    ; origin-track-forced(
        Arg(
          id
        , nabl-def(
            ?c-uri1__
          , ?s-uri1__
          | lang__
          , partition__
          , uniques__
          , uri__
          , uri__
          , NablNsVariable()
          , Unique()
          , Current()
          , []
          , []
          )
        )
        ; match(child-uris__|c-uri1__)
        ; match(sibl-uris__|s-uri1__)
        ; match(implicits__|[])
      |
      )

  nabl-prop-site(|lang__, partition__, uris__, states__, implicits__) =
    ?Arg(t, a)
    ; origin-track-forced(
        Arg(
          id
        , nabl-store-props(
          | partition__
          , [Prop(Type(), t, [])]
          )
        )
      |
      )

  nabl-get-name :
    ArrayArg(t, a) -> a

  nabl-name-apply(s) =
    ArrayArg(id, s)

  nabl-def-site(child-uris__, sibl-uris__, implicits__|lang__, partition__, uniques__, uri__, states__) =
    ?ArrayArg(t, a)
    ; origin-track-forced(
        ArrayArg(
          id
        , nabl-def(
            ?c-uri1__
          , ?s-uri1__
          | lang__
          , partition__
          , uniques__
          , uri__
          , uri__
          , NablNsVariable()
          , Unique()
          , Current()
          , []
          , []
          )
        )
        ; match(child-uris__|c-uri1__)
        ; match(sibl-uris__|s-uri1__)
        ; match(implicits__|[])
      |
      )

  nabl-prop-site(|lang__, partition__, uris__, states__, implicits__) =
    ?ArrayArg(t, a)
    ; origin-track-forced(
        ArrayArg(
          id
        , nabl-store-props(
          | partition__
          , [Prop(Type(), t, [])]
          )
        )
      |
      )

  nabl-get-name :
    Var(v) -> v

  nabl-name-apply(s) =
    Var(s)

  nabl-use-site(|lang__, partition__, uniques__, uris__, states__) =
    ?Var(v)
    ; origin-track-forced(
        Var(
          nabl-use(
          | lang__
          , partition__
          , uniques__
          , uris__
          , [ UseCandidate(
                NablNsVariable()
              , []
              , Current()
              , True()
              , []
              )
            ]
          )
        )
      |
      )

  nabl-get-name :
    Field(f) -> f

  nabl-name-apply(s) =
    Field(s)

  nabl-use-site(|lang__, partition__, uniques__, uris__, states__) =
    ?Field(f)
    ; origin-track-forced(
        Field(
          nabl-use(
          | lang__
          , partition__
          , uniques__
          , uris__
          , [ UseCandidate(
                NablNsField()
              , []
              , Current()
              , True()
              , []
              )
            ]
          )
        )
      |
      )

  nabl-scoping-site =
    ?CodeBlock(_)
    ; origin-track-forced(
        nabl-scope(|[NablNsVariable()])
      |
      )

  nabl-get-scope =
    ?CodeBlock(_) ; ![NablNsVariable()]


rules

  nabl-get-scope =
    ?FunctionDef(t, f, params, _, _)
    ; ![NablNsVariable()]

  nabl-get-name :
    FunctionDef(t, f, params, _, _) -> f

  nabl-name-apply(s) =
    FunctionDef(id, s, id, id, id)

  nabl-def-site(child-uris__, sibl-uris__, implicits__|lang__, partition__, uniques__, uri__, states__) =
    ?FunctionDef(t, f, params, _, _)
    ; origin-track-forced(
        FunctionDef(
          id
        , nabl-def(
            ?c-uri1__
          , ?s-uri1__
          | lang__
          , partition__
          , uniques__
          , uri__
          , uri__
          , NablNsVariable()
          , Unique()
          , Current()
          , [NablNsVariable()]
          , []
          )
        , id
        , id
        , id
        )
        ; match(child-uris__|c-uri1__)
        ; match(sibl-uris__|s-uri1__)
        ; match(implicits__|[])
      |
      )

  nabl-prop-site(|lang__, partition__, uris__, states__, implicits__) =
    ?FunctionDef(t, f, params, _, _)
    ; origin-track-forced(
        where(r1-1-1__ := <get-property-task(|Type())> params)
        ; FunctionDef(
            id
          , nabl-store-props(
            | partition__
            , [ Prop(
                  Type()
                , (t, r1-1-1__)
                , [r1-1-1__]
                )
              ]
            )
          , id
          , id
          , id
          )
      |
      )

  nabl-get-name :
    Call(c, _) -> c

  nabl-name-apply(s) =
    Call(s, id)

  nabl-use-site(|lang__, partition__, uniques__, uris__, states__) =
    ?Call(c, _)
    ; origin-track-forced(
        Call(
          nabl-use(
          | lang__
          , partition__
          , uniques__
          , uris__
          , [ UseCandidate(
                NablNsVariable()
              , []
              , Current()
              , True()
              , []
              )
            ]
          )
        , id
        )
      |
      )