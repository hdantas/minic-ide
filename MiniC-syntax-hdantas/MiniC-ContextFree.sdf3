module MiniC-ContextFree

	imports
		MiniC-Lexical
 
	templates
		Program.File						= < <TypeDec*> <VarDec*> <FunctionDec*> <Exp> >
		
		TypeDec.StructDec					= < struct <ID> { <VarDec*> } ; >

	 	VarDec.VarDec						= < <Type> <ID> ; >
		VarDec.ArrayDec						= < <ArrayType> <ID> [ <INT> ] ; >
		
	
		FunctionDec.FunctionDef				= < <Type> <ID> ( <Parameter*; separator=","> ) { <VarDec*> <Statement*> return <Exp> ; } >
		
		Parameter.Arg						= < <Type>  <ID> >
		Parameter.ArrayArg					= < <ArrayType>  <ID> [ ] >
		
		ArrayType.Int						= < int >
		ArrayType.Float						= < float >
		Type.Array							= < <ArrayType> >
		Type.Struct							= < struct <ID>  >

		Statement.Assignment				= < <ID> = <Exp> ; >
		Statement.ArrayAssignment			= < <ID> [ <Exp> ] = <Exp> ; >
		Statement.StructMemberAssignment	= < <ID> . <ID> = <Exp> ; >
		Statement.IfElse					= < if ( <Exp> ) <Statement> else <Statement> >
		Statement.While						= < while ( <Exp> ) <Statement> >
		Statement.PrintfInt					= < printf ( "%i" , <Exp> ) ; >
		Statement.PrinfFloat				= < printf ( "%f" , <Exp> ) ; >
		Statement.CodeBlock					= < { <Statement*> } >

		Exp.IntConst						= < <INT> >
		Exp.FloatConst						= < <FLOAT> >
		
		Lvalue.Var						 	= < <ID> >
		Lvalue.StructMember					= < <Lvalue> . <Lvalue> > {left}
		Lvalue.ArrayVar						= < <ID> [ <Exp> ] >
		Exp 								= < <Lvalue> >
		
		Exp.And								= < <Exp> && <Exp> > {left}
		Exp.Lt								= [ [Exp] < [Exp] ] {non-assoc}
		Exp.Gt								= [ [Exp] > [Exp] ] {non-assoc}
		Exp.Add								= < <Exp> + <Exp> > {left}
		Exp.Subtract						= < <Exp> - <Exp> > {left}
		Exp.Multiply						= < <Exp> * <Exp> > {left}
		Exp.Divide							= < <Exp> / <Exp> > {left}
		Exp.Not								= < ! <Exp> >
		Exp									= < ( <Exp> ) > {bracket}
		Exp.Sizeof							= < sizeof ( <Exp> ) >
		Exp.Call							= < <ID> ( <Exp*; separator=","> ) >
  
	
	context-free priorities

  		{ left:
  			Exp.Multiply
  			Exp.Divide
  		} >	{ left:
  			Exp.Add
  			Exp.Subtract
  		} > { non-assoc:
  			Exp.Lt
  			Exp.Gt
  		} > { left:
  			Exp.And
  		}
  		
  	template options
  		keyword -/- [a-zA-Z]
  	
  	
  	