/** 
* This module contains functions to detect semantic constraint errors 
* caused by the (refactoring) transformation.
* REMARK: Only use this module in case name binding preservations are not checked.
* Otherwise, use behavior-preservation.generated.str
*/
module lib-refactoring/correctness-preservation.generated 

imports
  lib-refactoring/analysis-multifile.generated
  lib/editor-common.generated

strategies

  /**
   * Returns correctness preservation errors and warnings by analyzing semantic contraint issues 
   * in the ASTs before- and after- the transformation.
   * The analysis covers semantic-constraint errors and warnings, reporting problems for: 
   * - introduced issues
   * - (possible unintended) solved issues.
   * 
   * This rule applies to a tuple consisting of a list of ASTs before the transformation and 
   * a list of ASTs after the refactoring transformation. 
   * All ASTs that are possible (semantically or structurally) affected by the transformation must be included in both lists.
   * - The ASTs before the transformation contain name binding annotations set by @see analyze-top(|language) or @see analyze-asts-multifile.
   * - The ASTs after the transformation are later (re)analyzed by @see analyze-asts-multifile 
   *
   * @type (List(ast), List(ast)) -> (List(errors), List(warnings)
   * @param constraint-error    t -> (t, String)
   * @param constraint-warning  t -> (t, String)
   *
   * REMARK: Only use this rule in case the nambinding preservations are not checked.
   * Otherwise, use @see semantic-violation-errors(constraint-error, constraint-warning) 
   * in behavior-preservation.generated.str
   */
  correctness-violation-errors(constraint-error, constraint-warning):
    (asts-before-analyzed, asts-after) -> (errors, warnings)
    where
      (errors, warnings) := <correctness-violation-errors(constraint-error, constraint-warning, multifile-analyze-asts)>

  /**
   * @see correctness-violation-errors(constraint-error, constraint-warning)
   *
   * @type (List(ast), List(ast)) -> (List(errors), List(warnings)
   * @param constraint-error    t -> (t, String)
   * @param constraint-warning  t -> (t, String)
   * @param analyze-multifile   List(ast) -> List(ast) stores semantic info in ASTs and name index
   */
  correctness-violation-errors(constraint-error, constraint-warning, analyze-multifile):
    (asts-before-analyzed, asts-after) -> (errors, warnings)
    where
      //errors and warnings on analyzed asts before the transformation
      errors-before   := <mapconcat(collect-all(constraint-error, conc))> asts-before-analyzed; 
      warnings-before := <mapconcat(collect-all(constraint-warning, conc))> asts-before-analyzed; 
      
      //errors and warnings on (re)analyzed asts after the transformation
      asts-after-analyzed := <analyze-multifile> asts-after;      
      errors-after   := <mapconcat(collect-all(constraint-error, conc))> asts-after-analyzed;
      warnings-after := <mapconcat(collect-all(constraint-warning, conc))> asts-after-analyzed;
      
      //errors and warnings that are different in the ASTs before- and after- the transformation
      errors := <compare-constraint-issues> (errors-before, errors-after);
      warnings := <compare-constraint-issues> (warnings-before, warnings-after)

  //compares issues in the ASTs before transformation and in the ASTs after transformation
  compare-constraint-issues:
    (old-issues, new-issues) -> <conc> (introduced-issues, solved-issues)
    where
      introduced-issues := <diff(is-same-constraint-issue)> (new-issues, old-issues);
      solved-issues     := <diff(is-same-constraint-issue); map(!(<Fst>, $[SOLVED, [<Snd>]]))> (old-issues, new-issues)
  
  //decides wether an issue in the AST before transformation
  //and an issue in the AST after the transformation are the same.
  //@internal
  is-same-constraint-issue:
    issue-tuple@((trm1, message1), (trm2, message2)) -> issue-tuple
    where
      <origin-equal(|trm1)> trm2 <+
      <origin-equal(|trm2)> trm1
    where
      <equal> (message1, message2) <+ //unreliable because message may contain the string represenatation of the (changed) term
      <equal> (<has-annos; get-annos> trm1, <get-annos> trm2) //more reliable would be an annotation that indicates the error type
